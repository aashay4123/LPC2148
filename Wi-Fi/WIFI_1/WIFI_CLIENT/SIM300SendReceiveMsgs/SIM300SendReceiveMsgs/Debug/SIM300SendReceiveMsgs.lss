
SIM300SendReceiveMsgs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024c  00800060  000017a0  00001834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c2  008002ac  008002ac  00001a80  2**0
                  ALLOC
  3 .stab         000011ac  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000406  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c8  00000000  00000000  00003038  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002380  00000000  00000000  00003200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3f  00000000  00000000  00005580  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000133d  00000000  00000000  000060bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  000073fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000543  00000000  00000000  000078d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000207a  00000000  00000000  00007e17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00009e91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fe 05 	call	0xbfc	; 0xbfc <main>
      8a:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
      92:	87 b3       	in	r24, 0x17	; 23
      94:	80 7f       	andi	r24, 0xF0	; 240
      96:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
      98:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
      9a:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      9c:	82 e0       	ldi	r24, 0x02	; 2
      9e:	8a 95       	dec	r24
      a0:	f1 f7       	brne	.-4      	; 0x9e <LCDBusyLoop+0xc>
      a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCDBusyLoop+0x12>

	
	do
	{

		SET_E();
      a4:	c4 9a       	sbi	0x18, 4	; 24
      a6:	92 e0       	ldi	r25, 0x02	; 2
      a8:	9a 95       	dec	r25
      aa:	f1 f7       	brne	.-4      	; 0xa8 <LCDBusyLoop+0x16>
      ac:	00 c0       	rjmp	.+0      	; 0xae <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
      ae:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
      b0:	82 95       	swap	r24
      b2:	80 7f       	andi	r24, 0xF0	; 240
      b4:	92 e0       	ldi	r25, 0x02	; 2
      b6:	9a 95       	dec	r25
      b8:	f1 f7       	brne	.-4      	; 0xb6 <LCDBusyLoop+0x24>
      ba:	00 c0       	rjmp	.+0      	; 0xbc <LCDBusyLoop+0x2a>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
      bc:	c4 98       	cbi	0x18, 4	; 24
      be:	95 e0       	ldi	r25, 0x05	; 5
      c0:	9a 95       	dec	r25
      c2:	f1 f7       	brne	.-4      	; 0xc0 <LCDBusyLoop+0x2e>
      c4:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
      c6:	c4 9a       	sbi	0x18, 4	; 24
      c8:	92 e0       	ldi	r25, 0x02	; 2
      ca:	9a 95       	dec	r25
      cc:	f1 f7       	brne	.-4      	; 0xca <LCDBusyLoop+0x38>
      ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCDBusyLoop+0x3e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
      d0:	96 b3       	in	r25, 0x16	; 22
      d2:	92 e0       	ldi	r25, 0x02	; 2
      d4:	9a 95       	dec	r25
      d6:	f1 f7       	brne	.-4      	; 0xd4 <LCDBusyLoop+0x42>
      d8:	00 c0       	rjmp	.+0      	; 0xda <LCDBusyLoop+0x48>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
      da:	c4 98       	cbi	0x18, 4	; 24
      dc:	95 e0       	ldi	r25, 0x05	; 5
      de:	9a 95       	dec	r25
      e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0x4c>
      e2:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
      e4:	87 fd       	sbrc	r24, 7
      e6:	de cf       	rjmp	.-68     	; 0xa4 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
      e8:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
      ea:	87 b3       	in	r24, 0x17	; 23
      ec:	8f 60       	ori	r24, 0x0F	; 15
      ee:	87 bb       	out	0x17, r24	; 23

}
      f0:	08 95       	ret

000000f2 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
      f2:	28 2f       	mov	r18, r24
      f4:	22 95       	swap	r18
      f6:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
      f8:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
      fa:	66 23       	and	r22, r22
      fc:	21 f1       	breq	.+72     	; 0x146 <LCDByte+0x54>
	CLEAR_RS();
else
	SET_RS();
      fe:	93 9a       	sbi	0x12, 3	; 18
     100:	92 e0       	ldi	r25, 0x02	; 2
     102:	9a 95       	dec	r25
     104:	f1 f7       	brne	.-4      	; 0x102 <LCDByte+0x10>
     106:	00 c0       	rjmp	.+0      	; 0x108 <LCDByte+0x16>

_delay_us(0.500);		//tAS

SET_E();
     108:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     10a:	98 b3       	in	r25, 0x18	; 24
     10c:	90 7f       	andi	r25, 0xF0	; 240
     10e:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     110:	98 bb       	out	0x18, r25	; 24
     112:	95 e0       	ldi	r25, 0x05	; 5
     114:	9a 95       	dec	r25
     116:	f1 f7       	brne	.-4      	; 0x114 <LCDByte+0x22>
     118:	00 00       	nop

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     11a:	c4 98       	cbi	0x18, 4	; 24
     11c:	95 e0       	ldi	r25, 0x05	; 5
     11e:	9a 95       	dec	r25
     120:	f1 f7       	brne	.-4      	; 0x11e <LCDByte+0x2c>
     122:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     124:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     126:	98 b3       	in	r25, 0x18	; 24
     128:	90 7f       	andi	r25, 0xF0	; 240
     12a:	98 2b       	or	r25, r24

LCD_DATA_PORT=temp;
     12c:	98 bb       	out	0x18, r25	; 24
     12e:	85 e0       	ldi	r24, 0x05	; 5
     130:	8a 95       	dec	r24
     132:	f1 f7       	brne	.-4      	; 0x130 <LCDByte+0x3e>
     134:	00 00       	nop

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     136:	c4 98       	cbi	0x18, 4	; 24
     138:	95 e0       	ldi	r25, 0x05	; 5
     13a:	9a 95       	dec	r25
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCDByte+0x48>
     13e:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     140:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>
}
     144:	08 95       	ret

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
	CLEAR_RS();
     146:	93 98       	cbi	0x12, 3	; 18
     148:	db cf       	rjmp	.-74     	; 0x100 <LCDByte+0xe>

0000014a <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     154:	fc 01       	movw	r30, r24
     156:	80 81       	ld	r24, Z
     158:	88 23       	and	r24, r24
     15a:	b9 f4       	brne	.+46     	; 0x18a <LCDWriteString+0x40>
     15c:	22 c0       	rjmp	.+68     	; 0x1a2 <LCDWriteString+0x58>
 {
 	//Custom Char Support
	if(*msg=='%')
	{
		msg++;
     15e:	e8 01       	movw	r28, r16
     160:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     162:	f8 01       	movw	r30, r16
     164:	81 81       	ldd	r24, Z+1	; 0x01
     166:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     168:	88 30       	cpi	r24, 0x08	; 8
     16a:	30 f0       	brcs	.+12     	; 0x178 <LCDWriteString+0x2e>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
     16c:	85 e2       	ldi	r24, 0x25	; 37
     16e:	61 e0       	ldi	r22, 0x01	; 1
     170:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
			LCDData(*msg);
     174:	f8 01       	movw	r30, r16
     176:	81 81       	ldd	r24, Z+1	; 0x01
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	}
	else
	{
		LCDData(*msg);
	}
	msg++;
     17e:	8e 01       	movw	r16, r28
     180:	0f 5f       	subi	r16, 0xFF	; 255
     182:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	88 23       	and	r24, r24
     188:	61 f0       	breq	.+24     	; 0x1a2 <LCDWriteString+0x58>
 {
 	//Custom Char Support
	if(*msg=='%')
     18a:	85 32       	cpi	r24, 0x25	; 37
     18c:	41 f3       	breq	.-48     	; 0x15e <LCDWriteString+0x14>
			LCDData(*msg);
		}
	}
	else
	{
		LCDData(*msg);
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     194:	e8 01       	movw	r28, r16
	}
	msg++;
     196:	8e 01       	movw	r16, r28
     198:	0f 5f       	subi	r16, 0xFF	; 255
     19a:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	88 23       	and	r24, r24
     1a0:	a1 f7       	brne	.-24     	; 0x18a <LCDWriteString+0x40>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	08 95       	ret

000001ac <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     1ac:	cf 92       	push	r12
     1ae:	df 92       	push	r13
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <LCDWriteInt+0x12>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <LCDWriteInt+0x14>
     1c0:	0f 92       	push	r0
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     1c8:	6e 01       	movw	r12, r28
     1ca:	08 94       	sec
     1cc:	c1 1c       	adc	r12, r1
     1ce:	d1 1c       	adc	r13, r1
     1d0:	25 e0       	ldi	r18, 0x05	; 5
     1d2:	f6 01       	movw	r30, r12
     1d4:	11 92       	st	Z+, r1
     1d6:	2a 95       	dec	r18
     1d8:	e9 f7       	brne	.-6      	; 0x1d4 <LCDWriteInt+0x28>
	int i=4,j=0;
	while(val)
     1da:	00 97       	sbiw	r24, 0x00	; 0
     1dc:	59 f0       	breq	.+22     	; 0x1f4 <LCDWriteInt+0x48>
     1de:	fe 01       	movw	r30, r28
     1e0:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     1e2:	2a e0       	ldi	r18, 0x0A	; 10
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	b9 01       	movw	r22, r18
     1e8:	0e 94 6d 08 	call	0x10da	; 0x10da <__divmodhi4>
     1ec:	82 93       	st	-Z, r24
	val=val/10;
     1ee:	cb 01       	movw	r24, r22

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     1f0:	00 97       	sbiw	r24, 0x00	; 0
     1f2:	c9 f7       	brne	.-14     	; 0x1e6 <LCDWriteInt+0x3a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     1f4:	ff ef       	ldi	r31, 0xFF	; 255
     1f6:	ef 16       	cp	r14, r31
     1f8:	ff ef       	ldi	r31, 0xFF	; 255
     1fa:	ff 06       	cpc	r15, r31
     1fc:	59 f1       	breq	.+86     	; 0x254 <LCDWriteInt+0xa8>
		while(str[j]==0) j++;
	else
		j=5-field_length;
     1fe:	05 e0       	ldi	r16, 0x05	; 5
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	0e 19       	sub	r16, r14
     204:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     206:	05 30       	cpi	r16, 0x05	; 5
     208:	11 05       	cpc	r17, r1
     20a:	b4 f4       	brge	.+44     	; 0x238 <LCDWriteInt+0x8c>
     20c:	f6 01       	movw	r30, r12
     20e:	e0 0f       	add	r30, r16
     210:	f1 1f       	adc	r31, r17
     212:	80 81       	ld	r24, Z
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     214:	0f 5f       	subi	r16, 0xFF	; 255
     216:	1f 4f       	sbci	r17, 0xFF	; 255
     218:	76 01       	movw	r14, r12
     21a:	e0 0e       	add	r14, r16
     21c:	f1 1e       	adc	r15, r17
     21e:	05 c0       	rjmp	.+10     	; 0x22a <LCDWriteInt+0x7e>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     220:	f7 01       	movw	r30, r14
     222:	81 91       	ld	r24, Z+
     224:	7f 01       	movw	r14, r30
     226:	0f 5f       	subi	r16, 0xFF	; 255
     228:	1f 4f       	sbci	r17, 0xFF	; 255
	{
	LCDData(48+str[i]);
     22a:	80 5d       	subi	r24, 0xD0	; 208
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     232:	05 30       	cpi	r16, 0x05	; 5
     234:	11 05       	cpc	r17, r1
     236:	a4 f3       	brlt	.-24     	; 0x220 <LCDWriteInt+0x74>
	{
	LCDData(48+str[i]);
	}
}
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	ff 90       	pop	r15
     24c:	ef 90       	pop	r14
     24e:	df 90       	pop	r13
     250:	cf 90       	pop	r12
     252:	08 95       	ret
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	88 23       	and	r24, r24
     258:	51 f4       	brne	.+20     	; 0x26e <LCDWriteInt+0xc2>
     25a:	fe 01       	movw	r30, r28
     25c:	32 96       	adiw	r30, 0x02	; 2
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	10 e0       	ldi	r17, 0x00	; 0
     262:	0f 5f       	subi	r16, 0xFF	; 255
     264:	1f 4f       	sbci	r17, 0xFF	; 255
     266:	81 91       	ld	r24, Z+
     268:	88 23       	and	r24, r24
     26a:	d9 f3       	breq	.-10     	; 0x262 <LCDWriteInt+0xb6>
     26c:	cc cf       	rjmp	.-104    	; 0x206 <LCDWriteInt+0x5a>
     26e:	00 e0       	ldi	r16, 0x00	; 0
     270:	10 e0       	ldi	r17, 0x00	; 0
     272:	d0 cf       	rjmp	.-96     	; 0x214 <LCDWriteInt+0x68>

00000274 <LCDGotoXY>:
	LCDData(48+str[i]);
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     274:	84 31       	cpi	r24, 0x14	; 20
     276:	58 f4       	brcc	.+22     	; 0x28e <LCDGotoXY+0x1a>

	#ifdef LCD_TYPE_204
	
	switch(y)
     278:	62 30       	cpi	r22, 0x02	; 2
     27a:	51 f0       	breq	.+20     	; 0x290 <LCDGotoXY+0x1c>
     27c:	63 30       	cpi	r22, 0x03	; 3
     27e:	71 f0       	breq	.+28     	; 0x29c <LCDGotoXY+0x28>
     280:	61 30       	cpi	r22, 0x01	; 1
     282:	09 f4       	brne	.+2      	; 0x286 <LCDGotoXY+0x12>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     284:	80 64       	ori	r24, 0x40	; 64
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     286:	80 68       	ori	r24, 0x80	; 128
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     28e:	08 95       	ret
			break;
		case 1:
			x|=0b01000000;
			break;
		case 2:
			x+=0x14;
     290:	8c 5e       	subi	r24, 0xEC	; 236
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     292:	80 68       	ori	r24, 0x80	; 128
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     29a:	f9 cf       	rjmp	.-14     	; 0x28e <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
			break;
		case 3:
			x+=0x54;
     29c:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     29e:	80 68       	ori	r24, 0x80	; 128
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     2a6:	f3 cf       	rjmp	.-26     	; 0x28e <LCDGotoXY+0x1a>

000002a8 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	0f 92       	push	r0
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b6:	2f ef       	ldi	r18, 0xFF	; 255
     2b8:	36 e7       	ldi	r19, 0x76	; 118
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	21 50       	subi	r18, 0x01	; 1
     2be:	30 40       	sbci	r19, 0x00	; 0
     2c0:	40 40       	sbci	r20, 0x00	; 0
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <LCDInit+0x14>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCDInit+0x1e>
     2c6:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     2c8:	97 b3       	in	r25, 0x17	; 23
     2ca:	9f 60       	ori	r25, 0x0F	; 15
     2cc:	97 bb       	out	0x17, r25	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     2ce:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     2d0:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     2d2:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     2d4:	98 b3       	in	r25, 0x18	; 24
     2d6:	90 7f       	andi	r25, 0xF0	; 240
     2d8:	98 bb       	out	0x18, r25	; 24
	CLEAR_E();
     2da:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
     2dc:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
     2de:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCDInit+0x3a>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCDInit+0x3c>
     2e4:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     2e6:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     2e8:	c1 9a       	sbi	0x18, 1	; 24
     2ea:	35 e0       	ldi	r19, 0x05	; 5
     2ec:	3a 95       	dec	r19
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCDInit+0x44>
     2f0:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
     2f2:	c4 98       	cbi	0x18, 4	; 24
     2f4:	45 e0       	ldi	r20, 0x05	; 5
     2f6:	4a 95       	dec	r20
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCDInit+0x4e>
     2fa:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     2fc:	89 83       	std	Y+1, r24	; 0x01
     2fe:	0e 94 49 00 	call	0x92	; 0x92 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	8c 60       	ori	r24, 0x0C	; 12
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     30c:	88 e2       	ldi	r24, 0x28	; 40
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     314:	80 e4       	ldi	r24, 0x40	; 64
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
     31c:	00 e6       	ldi	r16, 0x60	; 96
     31e:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     320:	f8 01       	movw	r30, r16
     322:	81 91       	ld	r24, Z+
     324:	8f 01       	movw	r16, r30
     326:	61 e0       	ldi	r22, 0x01	; 1
     328:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	00 3a       	cpi	r16, 0xA0	; 160
     330:	1f 07       	cpc	r17, r31
     332:	b1 f7       	brne	.-20     	; 0x320 <LCDInit+0x78>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>

}
     33c:	0f 90       	pop	r0
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	08 95       	ret

00000348 <SIM300Cmd>:
	return SIM300_TIMEOUT;
			
}

int8_t SIM300Cmd(const char *cmd)
{
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	08 2f       	mov	r16, r24
     354:	c9 2f       	mov	r28, r25
	UWriteString(cmd);	//Send Command
     356:	0e 94 cc 05 	call	0xb98	; 0xb98 <UWriteString>
	UWriteData(0x0D);	//CR
     35a:	8d e0       	ldi	r24, 0x0D	; 13
     35c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <UWriteData>
	
	uint8_t len=strlen(cmd);
     360:	e0 2f       	mov	r30, r16
     362:	fc 2f       	mov	r31, r28
     364:	df 01       	movw	r26, r30
     366:	0d 90       	ld	r0, X+
     368:	00 20       	and	r0, r0
     36a:	e9 f7       	brne	.-6      	; 0x366 <SIM300Cmd+0x1e>
	
	len++;	//Add 1 for trailing CR added to all commands
     36c:	fa 2e       	mov	r15, r26
     36e:	f0 1a       	sub	r15, r16
	
	uint16_t i=0;
	
	//Wait for echo
	while(i<10*len)
     370:	8f 2d       	mov	r24, r15
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	8c 01       	movw	r16, r24
     376:	00 0f       	add	r16, r16
     378:	11 1f       	adc	r17, r17
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	08 0f       	add	r16, r24
     388:	19 1f       	adc	r17, r25
     38a:	01 15       	cp	r16, r1
     38c:	11 05       	cpc	r17, r1
     38e:	81 f0       	breq	.+32     	; 0x3b0 <SIM300Cmd+0x68>
	
	uint8_t len=strlen(cmd);
	
	len++;	//Add 1 for trailing CR added to all commands
	
	uint16_t i=0;
     390:	c0 e0       	ldi	r28, 0x00	; 0
     392:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Wait for echo
	while(i<10*len)
	{
		if(UDataAvailable()<len)
     394:	0e 94 aa 05 	call	0xb54	; 0xb54 <UDataAvailable>
     398:	8f 15       	cp	r24, r15
     39a:	88 f4       	brcc	.+34     	; 0x3be <SIM300Cmd+0x76>
		{
			i++;
     39c:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     39e:	8f e3       	ldi	r24, 0x3F	; 63
     3a0:	9c e9       	ldi	r25, 0x9C	; 156
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <SIM300Cmd+0x5a>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <SIM300Cmd+0x60>
     3a8:	00 00       	nop
	len++;	//Add 1 for trailing CR added to all commands
	
	uint16_t i=0;
	
	//Wait for echo
	while(i<10*len)
     3aa:	c0 17       	cp	r28, r16
     3ac:	d1 07       	cpc	r29, r17
     3ae:	91 f7       	brne	.-28     	; 0x394 <SIM300Cmd+0x4c>
			return SIM300_OK;
			
		}
	}
	
	return SIM300_TIMEOUT;
     3b0:	8d ef       	ldi	r24, 0xFD	; 253
			
}
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	ff 90       	pop	r15
     3bc:	08 95       	ret
		}
		else
		{
			//We got an echo
			//Now check it
			UReadBuffer(sim300_buffer,len);	//Read serial Data
     3be:	8e ee       	ldi	r24, 0xEE	; 238
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	6f 2d       	mov	r22, r15
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UReadBuffer>
			
			return SIM300_OK;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return SIM300_TIMEOUT;
			
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	08 95       	ret

000003d8 <SIM300CheckResponse>:

int8_t SIM300CheckResponse(const char *response,const char *check,uint8_t len)
{
     3d8:	fc 01       	movw	r30, r24
	len-=2;
	
	//Check leading CR LF
	if(response[0]!=0x0D | response[1]!=0x0A)
     3da:	81 81       	ldd	r24, Z+1	; 0x01
     3dc:	8a 30       	cpi	r24, 0x0A	; 10
     3de:	11 f0       	breq	.+4      	; 0x3e4 <SIM300CheckResponse+0xc>
		return	SIM300_INVALID_RESPONSE;
	
	//Check trailing CR LF
	if(response[len]!=0x0D | response[len+1]!=0x0A)
		return	SIM300_INVALID_RESPONSE;
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	08 95       	ret
int8_t SIM300CheckResponse(const char *response,const char *check,uint8_t len)
{
	len-=2;
	
	//Check leading CR LF
	if(response[0]!=0x0D | response[1]!=0x0A)
     3e4:	80 81       	ld	r24, Z
     3e6:	8d 30       	cpi	r24, 0x0D	; 13
     3e8:	d9 f7       	brne	.-10     	; 0x3e0 <SIM300CheckResponse+0x8>
			
}

int8_t SIM300CheckResponse(const char *response,const char *check,uint8_t len)
{
	len-=2;
     3ea:	84 2f       	mov	r24, r20
     3ec:	82 50       	subi	r24, 0x02	; 2
	//Check leading CR LF
	if(response[0]!=0x0D | response[1]!=0x0A)
		return	SIM300_INVALID_RESPONSE;
	
	//Check trailing CR LF
	if(response[len]!=0x0D | response[len+1]!=0x0A)
     3ee:	df 01       	movw	r26, r30
     3f0:	a8 0f       	add	r26, r24
     3f2:	b1 1d       	adc	r27, r1
     3f4:	11 96       	adiw	r26, 0x01	; 1
     3f6:	9c 91       	ld	r25, X
     3f8:	11 97       	sbiw	r26, 0x01	; 1
     3fa:	9a 30       	cpi	r25, 0x0A	; 10
     3fc:	89 f7       	brne	.-30     	; 0x3e0 <SIM300CheckResponse+0x8>
     3fe:	9c 91       	ld	r25, X
     400:	9d 30       	cpi	r25, 0x0D	; 13
     402:	71 f7       	brne	.-36     	; 0x3e0 <SIM300CheckResponse+0x8>
		return	SIM300_INVALID_RESPONSE;
		
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
     404:	83 30       	cpi	r24, 0x03	; 3
     406:	88 f0       	brcs	.+34     	; 0x42a <SIM300CheckResponse+0x52>
	{
		if(response[i]!=check[i-2])
     408:	92 81       	ldd	r25, Z+2	; 0x02
     40a:	db 01       	movw	r26, r22
     40c:	8c 91       	ld	r24, X
     40e:	98 17       	cp	r25, r24
     410:	81 f4       	brne	.+32     	; 0x432 <SIM300CheckResponse+0x5a>
	
	return SIM300_TIMEOUT;
			
}

int8_t SIM300CheckResponse(const char *response,const char *check,uint8_t len)
     412:	33 96       	adiw	r30, 0x03	; 3
     414:	11 96       	adiw	r26, 0x01	; 1
     416:	45 50       	subi	r20, 0x05	; 5
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	05 c0       	rjmp	.+10     	; 0x426 <SIM300CheckResponse+0x4e>
		
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
	{
		if(response[i]!=check[i-2])
     41c:	21 91       	ld	r18, Z+
     41e:	9d 91       	ld	r25, X+
     420:	8f 5f       	subi	r24, 0xFF	; 255
     422:	29 17       	cp	r18, r25
     424:	21 f4       	brne	.+8      	; 0x42e <SIM300CheckResponse+0x56>
	if(response[len]!=0x0D | response[len+1]!=0x0A)
		return	SIM300_INVALID_RESPONSE;
		
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
     426:	84 17       	cp	r24, r20
     428:	c9 f7       	brne	.-14     	; 0x41c <SIM300CheckResponse+0x44>
	{
		if(response[i]!=check[i-2])
			return SIM300_FAIL;
	}
	
	return SIM300_OK;		
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	08 95       	ret
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
	{
		if(response[i]!=check[i-2])
			return SIM300_FAIL;
     42e:	8e ef       	ldi	r24, 0xFE	; 254
	}
	
	return SIM300_OK;		
}
     430:	08 95       	ret
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
	{
		if(response[i]!=check[i-2])
			return SIM300_FAIL;
     432:	8e ef       	ldi	r24, 0xFE	; 254
     434:	08 95       	ret

00000436 <SIM300Init>:

//A common buffer used to read response from SIM300
char sim300_buffer[128];

int8_t SIM300Init()
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
	//Init USART lib
	USARTInit(103);
     43a:	87 e6       	ldi	r24, 0x67	; 103
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 1a 05 	call	0xa34	; 0xa34 <USARTInit>
	
	//Check communication line
	SIM300Cmd("AT");	//Test command
     442:	80 ea       	ldi	r24, 0xA0	; 160
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 a4 01 	call	0x348	; 0x348 <SIM300Cmd>
     44a:	ca e0       	ldi	r28, 0x0A	; 10
     44c:	d0 e0       	ldi	r29, 0x00	; 0
	//correct response is 6 byte long
	//So wait until we have got 6 bytes
	//in buffer.
	while(i<10)
	{
		if(UDataAvailable()<6)
     44e:	0e 94 aa 05 	call	0xb54	; 0xb54 <UDataAvailable>
     452:	86 30       	cpi	r24, 0x06	; 6
     454:	60 f4       	brcc	.+24     	; 0x46e <SIM300Init+0x38>
     456:	8f e3       	ldi	r24, 0x3F	; 63
     458:	9c e9       	ldi	r25, 0x9C	; 156
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <SIM300Init+0x24>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <SIM300Init+0x2a>
     460:	00 00       	nop
     462:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t i=0;
	
	//correct response is 6 byte long
	//So wait until we have got 6 bytes
	//in buffer.
	while(i<10)
     464:	a1 f7       	brne	.-24     	; 0x44e <SIM300Init+0x18>
	}
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
     466:	8d ef       	ldi	r24, 0xFD	; 253
			
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret
		}			
		else
		{
			//We got a response that is 6 bytes long
			//Now check it	
			UReadBuffer(sim300_buffer,6);	//Read serial Data
     46e:	8e ee       	ldi	r24, 0xEE	; 238
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	66 e0       	ldi	r22, 0x06	; 6
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UReadBuffer>
			
			return SIM300CheckResponse(sim300_buffer,"OK",6);
     47a:	8e ee       	ldi	r24, 0xEE	; 238
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	63 ea       	ldi	r22, 0xA3	; 163
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	46 e0       	ldi	r20, 0x06	; 6
     484:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <SIM300CheckResponse>
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
			
}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <SIM300WaitForResponse>:
	
	return SIM300_OK;		
}

int8_t SIM300WaitForResponse(uint16_t timeout)
{
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	8c 01       	movw	r16, r24
	uint8_t i=0;
	uint16_t n=0;
     49a:	c0 e0       	ldi	r28, 0x00	; 0
     49c:	d0 e0       	ldi	r29, 0x00	; 0
	return SIM300_OK;		
}

int8_t SIM300WaitForResponse(uint16_t timeout)
{
	uint8_t i=0;
     49e:	ff 24       	eor	r15, r15
	uint16_t n=0;
	
	while(1)
	{
		while (UDataAvailable()==0 && n<timeout){n++; _delay_ms(1);}
     4a0:	0e 94 aa 05 	call	0xb54	; 0xb54 <UDataAvailable>
     4a4:	88 23       	and	r24, r24
     4a6:	19 f4       	brne	.+6      	; 0x4ae <SIM300WaitForResponse+0x20>
     4a8:	c0 17       	cp	r28, r16
     4aa:	d1 07       	cpc	r29, r17
     4ac:	d0 f0       	brcs	.+52     	; 0x4e2 <SIM300WaitForResponse+0x54>
	
		if(n==timeout)
     4ae:	c0 17       	cp	r28, r16
     4b0:	d1 07       	cpc	r29, r17
     4b2:	f9 f0       	breq	.+62     	; 0x4f2 <SIM300WaitForResponse+0x64>
			return 0;
		else
		{
			sim300_buffer[i]=UReadData();
     4b4:	0e 94 7f 05 	call	0xafe	; 0xafe <UReadData>
     4b8:	ef 2d       	mov	r30, r15
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	e2 51       	subi	r30, 0x12	; 18
     4be:	fd 4f       	sbci	r31, 0xFD	; 253
     4c0:	80 83       	st	Z, r24
		
			if(sim300_buffer[i]==0x0D && i!=0)
     4c2:	8d 30       	cpi	r24, 0x0D	; 13
     4c4:	11 f0       	breq	.+4      	; 0x4ca <SIM300WaitForResponse+0x3c>
			{
				UFlushBuffer();
				return i+1;
			}				
			else
				i++;
     4c6:	f3 94       	inc	r15
		}
	}	
     4c8:	eb cf       	rjmp	.-42     	; 0x4a0 <SIM300WaitForResponse+0x12>
			return 0;
		else
		{
			sim300_buffer[i]=UReadData();
		
			if(sim300_buffer[i]==0x0D && i!=0)
     4ca:	ff 20       	and	r15, r15
     4cc:	e1 f3       	breq	.-8      	; 0x4c6 <SIM300WaitForResponse+0x38>
			{
				UFlushBuffer();
     4ce:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
				return i+1;
     4d2:	8f 2d       	mov	r24, r15
     4d4:	8f 5f       	subi	r24, 0xFF	; 255
			}				
			else
				i++;
		}
	}	
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	08 95       	ret
	uint8_t i=0;
	uint16_t n=0;
	
	while(1)
	{
		while (UDataAvailable()==0 && n<timeout){n++; _delay_ms(1);}
     4e2:	21 96       	adiw	r28, 0x01	; 1
     4e4:	8f e9       	ldi	r24, 0x9F	; 159
     4e6:	9f e0       	ldi	r25, 0x0F	; 15
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <SIM300WaitForResponse+0x5a>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <SIM300WaitForResponse+0x60>
     4ee:	00 00       	nop
     4f0:	d7 cf       	rjmp	.-82     	; 0x4a0 <SIM300WaitForResponse+0x12>
	
		if(n==timeout)
			return 0;
     4f2:	80 e0       	ldi	r24, 0x00	; 0
			}				
			else
				i++;
		}
	}	
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	08 95       	ret

00000500 <SIM300GetNetStat>:

int8_t SIM300GetNetStat()
{
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
	//Send Command
	SIM300Cmd("AT+CREG?");
     504:	86 ea       	ldi	r24, 0xA6	; 166
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 a4 01 	call	0x348	; 0x348 <SIM300Cmd>
     50c:	ca e0       	ldi	r28, 0x0A	; 10
     50e:	d0 e0       	ldi	r29, 0x00	; 0
	//correct response is 20 byte long
	//So wait until we have got 20 bytes
	//in buffer.
	while(i<10)
	{
		if(UDataAvailable()<20)
     510:	0e 94 aa 05 	call	0xb54	; 0xb54 <UDataAvailable>
     514:	84 31       	cpi	r24, 0x14	; 20
     516:	60 f4       	brcc	.+24     	; 0x530 <SIM300GetNetStat+0x30>
     518:	8f e3       	ldi	r24, 0x3F	; 63
     51a:	9c e9       	ldi	r25, 0x9C	; 156
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <SIM300GetNetStat+0x1c>
     520:	00 c0       	rjmp	.+0      	; 0x522 <SIM300GetNetStat+0x22>
     522:	00 00       	nop
     524:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t i=0;
	
	//correct response is 20 byte long
	//So wait until we have got 20 bytes
	//in buffer.
	while(i<10)
     526:	a1 f7       	brne	.-24     	; 0x510 <SIM300GetNetStat+0x10>
	}
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
     528:	8d ef       	ldi	r24, 0xFD	; 253
	
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret
		}
		else
		{
			//We got a response that is 20 bytes long
			//Now check it
			UReadBuffer(sim300_buffer,20);	//Read serial Data
     530:	8e ee       	ldi	r24, 0xEE	; 238
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	64 e1       	ldi	r22, 0x14	; 20
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UReadBuffer>
			
			if(sim300_buffer[11]=='1')
     53c:	80 91 f9 02 	lds	r24, 0x02F9
     540:	81 33       	cpi	r24, 0x31	; 49
     542:	61 f0       	breq	.+24     	; 0x55c <SIM300GetNetStat+0x5c>
				return SIM300_NW_REGISTERED_HOME;
			else if(sim300_buffer[11]=='2')
     544:	82 33       	cpi	r24, 0x32	; 50
     546:	31 f0       	breq	.+12     	; 0x554 <SIM300GetNetStat+0x54>
				return SIM300_NW_SEARCHING;
			else if(sim300_buffer[11]=='5')
     548:	85 33       	cpi	r24, 0x35	; 53
     54a:	61 f0       	breq	.+24     	; 0x564 <SIM300GetNetStat+0x64>
				return SIM300_NW_REGISTED_ROAMING;
			else
				return SIM300_NW_ERROR;			
     54c:	83 e6       	ldi	r24, 0x63	; 99
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
	
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret
			UReadBuffer(sim300_buffer,20);	//Read serial Data
			
			if(sim300_buffer[11]=='1')
				return SIM300_NW_REGISTERED_HOME;
			else if(sim300_buffer[11]=='2')
				return SIM300_NW_SEARCHING;
     554:	82 e0       	ldi	r24, 0x02	; 2
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
	
}
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret
			//We got a response that is 20 bytes long
			//Now check it
			UReadBuffer(sim300_buffer,20);	//Read serial Data
			
			if(sim300_buffer[11]=='1')
				return SIM300_NW_REGISTERED_HOME;
     55c:	81 e0       	ldi	r24, 0x01	; 1
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
	
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret
			if(sim300_buffer[11]=='1')
				return SIM300_NW_REGISTERED_HOME;
			else if(sim300_buffer[11]=='2')
				return SIM300_NW_SEARCHING;
			else if(sim300_buffer[11]=='5')
				return SIM300_NW_REGISTED_ROAMING;
     564:	85 e0       	ldi	r24, 0x05	; 5
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
	
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <SIM300IsSIMInserted>:

int8_t SIM300IsSIMInserted()
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
	UFlushBuffer();
     570:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+CSMINS?");
     574:	8f ea       	ldi	r24, 0xAF	; 175
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 a4 01 	call	0x348	; 0x348 <SIM300Cmd>
     57c:	ce e1       	ldi	r28, 0x1E	; 30
     57e:	d0 e0       	ldi	r29, 0x00	; 0
	//correct response is 22 byte long
	//So wait until we have got 22 bytes
	//in buffer.
	while(i<30)
	{
		if(UDataAvailable()<22)
     580:	0e 94 aa 05 	call	0xb54	; 0xb54 <UDataAvailable>
     584:	86 31       	cpi	r24, 0x16	; 22
     586:	50 f4       	brcc	.+20     	; 0x59c <SIM300IsSIMInserted+0x30>
     588:	8f e3       	ldi	r24, 0x3F	; 63
     58a:	9c e9       	ldi	r25, 0x9C	; 156
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <SIM300IsSIMInserted+0x20>
     590:	00 c0       	rjmp	.+0      	; 0x592 <SIM300IsSIMInserted+0x26>
     592:	00 00       	nop
     594:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t i=0;
	
	//correct response is 22 byte long
	//So wait until we have got 22 bytes
	//in buffer.
	while(i<30)
     596:	a1 f7       	brne	.-24     	; 0x580 <SIM300IsSIMInserted+0x14>
	}
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
     598:	8d ef       	ldi	r24, 0xFD	; 253
     59a:	0c c0       	rjmp	.+24     	; 0x5b4 <SIM300IsSIMInserted+0x48>
		}
		else
		{
			//We got a response that is 22 bytes long
			//Now check it
			UReadBuffer(sim300_buffer,22);	//Read serial Data
     59c:	8e ee       	ldi	r24, 0xEE	; 238
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	66 e1       	ldi	r22, 0x16	; 22
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UReadBuffer>
			
			if(sim300_buffer[13]=='1')
				return SIM300_SIM_PRESENT;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 91 fb 02 	lds	r25, 0x02FB
     5ae:	91 33       	cpi	r25, 0x31	; 49
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <SIM300IsSIMInserted+0x48>
     5b2:	80 e0       	ldi	r24, 0x00	; 0
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <SIM300GetProviderName>:

uint8_t SIM300GetProviderName(char *name)
{
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	8c 01       	movw	r16, r24
	UFlushBuffer();
     5c4:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+CSPN?");
     5c8:	8a eb       	ldi	r24, 0xBA	; 186
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 a4 01 	call	0x348	; 0x348 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     5d0:	88 ee       	ldi	r24, 0xE8	; 232
     5d2:	93 e0       	ldi	r25, 0x03	; 3
     5d4:	0e 94 47 02 	call	0x48e	; 0x48e <SIM300WaitForResponse>
	
	if(len==0)
     5d8:	88 23       	and	r24, r24
     5da:	31 f4       	brne	.+12     	; 0x5e8 <SIM300GetProviderName+0x2e>
		return SIM300_TIMEOUT;
     5dc:	8d ef       	ldi	r24, 0xFD	; 253
	*end='\0';
	
	strcpy(name,start);
	
	return strlen(name);
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	08 95       	ret
	
	if(len==0)
		return SIM300_TIMEOUT;
	
	char *start,*end;
	start=strchr(sim300_buffer,'"');
     5e8:	8e ee       	ldi	r24, 0xEE	; 238
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	62 e2       	ldi	r22, 0x22	; 34
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	0e 94 c5 08 	call	0x118a	; 0x118a <strchr>
	start++;
     5f4:	ec 01       	movw	r28, r24
     5f6:	21 96       	adiw	r28, 0x01	; 1
	end=strchr(start,'"');
     5f8:	ce 01       	movw	r24, r28
     5fa:	62 e2       	ldi	r22, 0x22	; 34
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	0e 94 c5 08 	call	0x118a	; 0x118a <strchr>
     602:	fc 01       	movw	r30, r24
	
	*end='\0';
     604:	10 82       	st	Z, r1
	
	strcpy(name,start);
     606:	c8 01       	movw	r24, r16
     608:	be 01       	movw	r22, r28
     60a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <strcpy>
	
	return strlen(name);
     60e:	d8 01       	movw	r26, r16
     610:	0d 90       	ld	r0, X+
     612:	00 20       	and	r0, r0
     614:	e9 f7       	brne	.-6      	; 0x610 <SIM300GetProviderName+0x56>
     616:	11 97       	sbiw	r26, 0x01	; 1
     618:	8a 2f       	mov	r24, r26
     61a:	80 1b       	sub	r24, r16
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	08 95       	ret

00000626 <SIM300GetIMEI>:

int8_t SIM300GetIMEI(char *emei)
{
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ec 01       	movw	r28, r24
	UFlushBuffer();
     62c:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+GSN");
     630:	83 ec       	ldi	r24, 0xC3	; 195
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 a4 01 	call	0x348	; 0x348 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     638:	88 ee       	ldi	r24, 0xE8	; 232
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	0e 94 47 02 	call	0x48e	; 0x48e <SIM300WaitForResponse>
	
	if(len==0)
     640:	88 23       	and	r24, r24
     642:	71 f0       	breq	.+28     	; 0x660 <SIM300GetIMEI+0x3a>
		return SIM300_TIMEOUT;
		
	sim300_buffer[len-1]='\0';
     644:	e8 2f       	mov	r30, r24
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	e3 51       	subi	r30, 0x13	; 19
     64a:	fd 4f       	sbci	r31, 0xFD	; 253
     64c:	10 82       	st	Z, r1
	
	strcpy(emei,sim300_buffer+2);
     64e:	ce 01       	movw	r24, r28
     650:	60 ef       	ldi	r22, 0xF0	; 240
     652:	72 e0       	ldi	r23, 0x02	; 2
     654:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <strcpy>
	
	return SIM300_OK;	
     658:	81 e0       	ldi	r24, 0x01	; 1
}
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret
	SIM300Cmd("AT+GSN");
	
	uint8_t len=SIM300WaitForResponse(1000);
	
	if(len==0)
		return SIM300_TIMEOUT;
     660:	8d ef       	ldi	r24, 0xFD	; 253
     662:	fb cf       	rjmp	.-10     	; 0x65a <SIM300GetIMEI+0x34>

00000664 <SIM300GetManufacturer>:
	
	return SIM300_OK;	
}

int8_t SIM300GetManufacturer(char *man_id)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
	UFlushBuffer();
     66a:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+GMI");
     66e:	8a ec       	ldi	r24, 0xCA	; 202
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 a4 01 	call	0x348	; 0x348 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     676:	88 ee       	ldi	r24, 0xE8	; 232
     678:	93 e0       	ldi	r25, 0x03	; 3
     67a:	0e 94 47 02 	call	0x48e	; 0x48e <SIM300WaitForResponse>
	
	if(len==0)
     67e:	88 23       	and	r24, r24
     680:	71 f0       	breq	.+28     	; 0x69e <SIM300GetManufacturer+0x3a>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
     682:	e8 2f       	mov	r30, r24
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	e3 51       	subi	r30, 0x13	; 19
     688:	fd 4f       	sbci	r31, 0xFD	; 253
     68a:	10 82       	st	Z, r1
	
	strcpy(man_id,sim300_buffer+2);//+2 for removing leading CR LF
     68c:	ce 01       	movw	r24, r28
     68e:	60 ef       	ldi	r22, 0xF0	; 240
     690:	72 e0       	ldi	r23, 0x02	; 2
     692:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <strcpy>
	
	return SIM300_OK;
     696:	81 e0       	ldi	r24, 0x01	; 1
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret
	SIM300Cmd("AT+GMI");
	
	uint8_t len=SIM300WaitForResponse(1000);
	
	if(len==0)
		return SIM300_TIMEOUT;
     69e:	8d ef       	ldi	r24, 0xFD	; 253
     6a0:	fb cf       	rjmp	.-10     	; 0x698 <SIM300GetManufacturer+0x34>

000006a2 <SIM300GetModel>:
	
	return SIM300_OK;
}

int8_t	SIM300GetModel(char *model)
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	UFlushBuffer();
     6a8:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+GMM");
     6ac:	81 ed       	ldi	r24, 0xD1	; 209
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 a4 01 	call	0x348	; 0x348 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     6b4:	88 ee       	ldi	r24, 0xE8	; 232
     6b6:	93 e0       	ldi	r25, 0x03	; 3
     6b8:	0e 94 47 02 	call	0x48e	; 0x48e <SIM300WaitForResponse>
	
	if(len==0)
     6bc:	88 23       	and	r24, r24
     6be:	71 f0       	breq	.+28     	; 0x6dc <SIM300GetModel+0x3a>
	return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
     6c0:	e8 2f       	mov	r30, r24
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	e3 51       	subi	r30, 0x13	; 19
     6c6:	fd 4f       	sbci	r31, 0xFD	; 253
     6c8:	10 82       	st	Z, r1
	
	strcpy(model,sim300_buffer+2);//+2 for removing leading CR LF
     6ca:	ce 01       	movw	r24, r28
     6cc:	60 ef       	ldi	r22, 0xF0	; 240
     6ce:	72 e0       	ldi	r23, 0x02	; 2
     6d0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <strcpy>
	
	return SIM300_OK;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret
	SIM300Cmd("AT+GMM");
	
	uint8_t len=SIM300WaitForResponse(1000);
	
	if(len==0)
	return SIM300_TIMEOUT;
     6dc:	8d ef       	ldi	r24, 0xFD	; 253
     6de:	fb cf       	rjmp	.-10     	; 0x6d6 <SIM300GetModel+0x34>

000006e0 <SIM300DeleteMsg>:
	strcpy(model,sim300_buffer+2);//+2 for removing leading CR LF
	
	return SIM300_OK;
}
int8_t	SIM300DeleteMsg(uint8_t i)
{
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	61 97       	sbiw	r28, 0x11	; 17
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
	UFlushBuffer();
     6f8:	89 8b       	std	Y+17, r24	; 0x11
     6fa:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
	
	//String for storing the command to be sent
	char cmd[16];
	
	//Build command string
	sprintf(cmd,"AT+CMGD=%d",i);
     6fe:	00 d0       	rcall	.+0      	; 0x700 <SIM300DeleteMsg+0x20>
     700:	00 d0       	rcall	.+0      	; 0x702 <SIM300DeleteMsg+0x22>
     702:	00 d0       	rcall	.+0      	; 0x704 <SIM300DeleteMsg+0x24>
     704:	ed b7       	in	r30, 0x3d	; 61
     706:	fe b7       	in	r31, 0x3e	; 62
     708:	31 96       	adiw	r30, 0x01	; 1
     70a:	8e 01       	movw	r16, r28
     70c:	0f 5f       	subi	r16, 0xFF	; 255
     70e:	1f 4f       	sbci	r17, 0xFF	; 255
     710:	ad b7       	in	r26, 0x3d	; 61
     712:	be b7       	in	r27, 0x3e	; 62
     714:	12 96       	adiw	r26, 0x02	; 2
     716:	1c 93       	st	X, r17
     718:	0e 93       	st	-X, r16
     71a:	11 97       	sbiw	r26, 0x01	; 1
     71c:	28 ed       	ldi	r18, 0xD8	; 216
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	33 83       	std	Z+3, r19	; 0x03
     722:	22 83       	std	Z+2, r18	; 0x02
     724:	89 89       	ldd	r24, Y+17	; 0x11
     726:	84 83       	std	Z+4, r24	; 0x04
     728:	15 82       	std	Z+5, r1	; 0x05
     72a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
	
	//Send Command
	SIM300Cmd(cmd);
     72e:	8d b7       	in	r24, 0x3d	; 61
     730:	9e b7       	in	r25, 0x3e	; 62
     732:	06 96       	adiw	r24, 0x06	; 6
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	9e bf       	out	0x3e, r25	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	8d bf       	out	0x3d, r24	; 61
     73e:	c8 01       	movw	r24, r16
     740:	0e 94 a4 01 	call	0x348	; 0x348 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     744:	88 ee       	ldi	r24, 0xE8	; 232
     746:	93 e0       	ldi	r25, 0x03	; 3
     748:	0e 94 47 02 	call	0x48e	; 0x48e <SIM300WaitForResponse>
	
	if(len==0)
     74c:	88 23       	and	r24, r24
     74e:	c9 f0       	breq	.+50     	; 0x782 <SIM300DeleteMsg+0xa2>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
     750:	e8 2f       	mov	r30, r24
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	e3 51       	subi	r30, 0x13	; 19
     756:	fd 4f       	sbci	r31, 0xFD	; 253
     758:	10 82       	st	Z, r1
	
	//Check if the response is OK
	if(strcasecmp(sim300_buffer+2,"OK")==0)
     75a:	80 ef       	ldi	r24, 0xF0	; 240
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	63 ea       	ldi	r22, 0xA3	; 163
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	0e 94 b2 08 	call	0x1164	; 0x1164 <strcasecmp>
     766:	00 97       	sbiw	r24, 0x00	; 0
     768:	71 f4       	brne	.+28     	; 0x786 <SIM300DeleteMsg+0xa6>
		return SIM300_OK;
     76a:	81 e0       	ldi	r24, 0x01	; 1
	else
		return SIM300_FAIL;
}
     76c:	61 96       	adiw	r28, 0x11	; 17
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	08 95       	ret
	SIM300Cmd(cmd);
	
	uint8_t len=SIM300WaitForResponse(1000);
	
	if(len==0)
		return SIM300_TIMEOUT;
     782:	8d ef       	ldi	r24, 0xFD	; 253
     784:	f3 cf       	rjmp	.-26     	; 0x76c <SIM300DeleteMsg+0x8c>
	
	//Check if the response is OK
	if(strcasecmp(sim300_buffer+2,"OK")==0)
		return SIM300_OK;
	else
		return SIM300_FAIL;
     786:	8e ef       	ldi	r24, 0xFE	; 254
     788:	f1 cf       	rjmp	.-30     	; 0x76c <SIM300DeleteMsg+0x8c>

0000078a <SIM300WaitForMsg>:
}

int8_t	SIM300WaitForMsg(uint8_t *id)
{	
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	00 d0       	rcall	.+0      	; 0x794 <SIM300WaitForMsg+0xa>
     794:	00 d0       	rcall	.+0      	; 0x796 <SIM300WaitForMsg+0xc>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	8c 01       	movw	r16, r24
	uint8_t len=SIM300WaitForResponse(250);
     79c:	8a ef       	ldi	r24, 0xFA	; 250
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 47 02 	call	0x48e	; 0x48e <SIM300WaitForResponse>
	
	if(len==0)
     7a4:	88 23       	and	r24, r24
     7a6:	71 f1       	breq	.+92     	; 0x804 <SIM300WaitForMsg+0x7a>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
     7a8:	e8 2f       	mov	r30, r24
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	e3 51       	subi	r30, 0x13	; 19
     7ae:	fd 4f       	sbci	r31, 0xFD	; 253
     7b0:	10 82       	st	Z, r1
	
	if(strncasecmp(sim300_buffer+2,"+CMTI:",6)==0)
     7b2:	80 ef       	ldi	r24, 0xF0	; 240
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	63 ee       	ldi	r22, 0xE3	; 227
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	46 e0       	ldi	r20, 0x06	; 6
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	0e 94 d7 08 	call	0x11ae	; 0x11ae <strncasecmp>
     7c2:	00 97       	sbiw	r24, 0x00	; 0
     7c4:	e9 f4       	brne	.+58     	; 0x800 <SIM300WaitForMsg+0x76>
	{
		char str_id[4];
		
		char *start;
		
		start=strchr(sim300_buffer,',');
     7c6:	8e ee       	ldi	r24, 0xEE	; 238
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	6c e2       	ldi	r22, 0x2C	; 44
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	0e 94 c5 08 	call	0x118a	; 0x118a <strchr>
		start++;
     7d2:	bc 01       	movw	r22, r24
     7d4:	6f 5f       	subi	r22, 0xFF	; 255
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
	
		strcpy(str_id,start);
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <strcpy>
		
		*id=atoi(str_id);
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 94 08 	call	0x1128	; 0x1128 <atoi>
     7e8:	f8 01       	movw	r30, r16
     7ea:	80 83       	st	Z, r24
		
		return SIM300_OK;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
	}		
	else
		return SIM300_FAIL;
}
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	08 95       	ret
		*id=atoi(str_id);
		
		return SIM300_OK;
	}		
	else
		return SIM300_FAIL;
     800:	8e ef       	ldi	r24, 0xFE	; 254
     802:	f5 cf       	rjmp	.-22     	; 0x7ee <SIM300WaitForMsg+0x64>
int8_t	SIM300WaitForMsg(uint8_t *id)
{	
	uint8_t len=SIM300WaitForResponse(250);
	
	if(len==0)
		return SIM300_TIMEOUT;
     804:	8d ef       	ldi	r24, 0xFD	; 253
     806:	f3 cf       	rjmp	.-26     	; 0x7ee <SIM300WaitForMsg+0x64>

00000808 <SIM300ReadMsg>:
	}		
	else
		return SIM300_FAIL;
}
int8_t	SIM300ReadMsg(uint8_t i, char *msg)
{
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	61 97       	sbiw	r28, 0x11	; 17
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	7b 01       	movw	r14, r22
	//Clear pending data in queue
	UFlushBuffer();
     826:	89 8b       	std	Y+17, r24	; 0x11
     828:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
	
	//String for storing the command to be sent
	char cmd[16];
	
	//Build command string
	sprintf(cmd,"AT+CMGR=%d",i);
     82c:	00 d0       	rcall	.+0      	; 0x82e <SIM300ReadMsg+0x26>
     82e:	00 d0       	rcall	.+0      	; 0x830 <SIM300ReadMsg+0x28>
     830:	00 d0       	rcall	.+0      	; 0x832 <SIM300ReadMsg+0x2a>
     832:	ed b7       	in	r30, 0x3d	; 61
     834:	fe b7       	in	r31, 0x3e	; 62
     836:	31 96       	adiw	r30, 0x01	; 1
     838:	8e 01       	movw	r16, r28
     83a:	0f 5f       	subi	r16, 0xFF	; 255
     83c:	1f 4f       	sbci	r17, 0xFF	; 255
     83e:	ad b7       	in	r26, 0x3d	; 61
     840:	be b7       	in	r27, 0x3e	; 62
     842:	12 96       	adiw	r26, 0x02	; 2
     844:	1c 93       	st	X, r17
     846:	0e 93       	st	-X, r16
     848:	11 97       	sbiw	r26, 0x01	; 1
     84a:	2a ee       	ldi	r18, 0xEA	; 234
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	33 83       	std	Z+3, r19	; 0x03
     850:	22 83       	std	Z+2, r18	; 0x02
     852:	89 89       	ldd	r24, Y+17	; 0x11
     854:	84 83       	std	Z+4, r24	; 0x04
     856:	15 82       	std	Z+5, r1	; 0x05
     858:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
	
	//Send Command
	SIM300Cmd(cmd);
     85c:	8d b7       	in	r24, 0x3d	; 61
     85e:	9e b7       	in	r25, 0x3e	; 62
     860:	06 96       	adiw	r24, 0x06	; 6
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	9e bf       	out	0x3e, r25	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	8d bf       	out	0x3d, r24	; 61
     86c:	c8 01       	movw	r24, r16
     86e:	0e 94 a4 01 	call	0x348	; 0x348 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     872:	88 ee       	ldi	r24, 0xE8	; 232
     874:	93 e0       	ldi	r25, 0x03	; 3
     876:	0e 94 47 02 	call	0x48e	; 0x48e <SIM300WaitForResponse>
	
	if(len==0)
     87a:	88 23       	and	r24, r24
     87c:	b9 f1       	breq	.+110    	; 0x8ec <__stack+0x8d>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
     87e:	e8 2f       	mov	r30, r24
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	e3 51       	subi	r30, 0x13	; 19
     884:	fd 4f       	sbci	r31, 0xFD	; 253
     886:	10 82       	st	Z, r1
	
	//Check of SIM NOT Ready error
	if(strcasecmp(sim300_buffer+2,"+CMS ERROR: 517")==0)
     888:	80 ef       	ldi	r24, 0xF0	; 240
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	65 ef       	ldi	r22, 0xF5	; 245
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	0e 94 b2 08 	call	0x1164	; 0x1164 <strcasecmp>
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	71 f4       	brne	.+28     	; 0x8b4 <__stack+0x55>
	{
		//SIM NOT Ready
		return SIM300_SIM_NOT_READY;
     898:	84 e6       	ldi	r24, 0x64	; 100
	
	sim300_buffer[len-1]='\0';
	strcpy(msg,sim300_buffer+1);//+1 for removing trailing LF of prev line
	
	return SIM300_OK;
}
     89a:	61 96       	adiw	r28, 0x11	; 17
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	08 95       	ret
		//SIM NOT Ready
		return SIM300_SIM_NOT_READY;
	}
	
	//MSG Slot Empty
	if(strcasecmp(sim300_buffer+2,"OK")==0)
     8b4:	80 ef       	ldi	r24, 0xF0	; 240
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	63 ea       	ldi	r22, 0xA3	; 163
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	0e 94 b2 08 	call	0x1164	; 0x1164 <strcasecmp>
     8c0:	00 97       	sbiw	r24, 0x00	; 0
     8c2:	11 f4       	brne	.+4      	; 0x8c8 <__stack+0x69>
	{
		return SIM300_MSG_EMPTY;
     8c4:	85 e6       	ldi	r24, 0x65	; 101
     8c6:	e9 cf       	rjmp	.-46     	; 0x89a <__stack+0x3b>
	}
		
	//Now read the actual msg text
	len=SIM300WaitForResponse(1000);
     8c8:	88 ee       	ldi	r24, 0xE8	; 232
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 47 02 	call	0x48e	; 0x48e <SIM300WaitForResponse>
	
	if(len==0)
     8d0:	88 23       	and	r24, r24
     8d2:	61 f0       	breq	.+24     	; 0x8ec <__stack+0x8d>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
     8d4:	e8 2f       	mov	r30, r24
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	e3 51       	subi	r30, 0x13	; 19
     8da:	fd 4f       	sbci	r31, 0xFD	; 253
     8dc:	10 82       	st	Z, r1
	strcpy(msg,sim300_buffer+1);//+1 for removing trailing LF of prev line
     8de:	c7 01       	movw	r24, r14
     8e0:	6f ee       	ldi	r22, 0xEF	; 239
     8e2:	72 e0       	ldi	r23, 0x02	; 2
     8e4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <strcpy>
	
	return SIM300_OK;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	d7 cf       	rjmp	.-82     	; 0x89a <__stack+0x3b>
		
	//Now read the actual msg text
	len=SIM300WaitForResponse(1000);
	
	if(len==0)
		return SIM300_TIMEOUT;
     8ec:	8d ef       	ldi	r24, 0xFD	; 253
     8ee:	d5 cf       	rjmp	.-86     	; 0x89a <__stack+0x3b>

000008f0 <SIM300SendMsg>:
	
	return SIM300_OK;
}

int8_t	SIM300SendMsg(const char *num, const char *msg,uint8_t *msg_ref)
{
     8f0:	af 92       	push	r10
     8f2:	bf 92       	push	r11
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	69 97       	sbiw	r28, 0x19	; 25
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
     914:	6c 01       	movw	r12, r24
     916:	8b 01       	movw	r16, r22
     918:	5a 01       	movw	r10, r20
	UFlushBuffer();
     91a:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
	
	char cmd[25];
	
	sprintf(cmd,"AT+CMGS= %s",num);
     91e:	00 d0       	rcall	.+0      	; 0x920 <SIM300SendMsg+0x30>
     920:	00 d0       	rcall	.+0      	; 0x922 <SIM300SendMsg+0x32>
     922:	00 d0       	rcall	.+0      	; 0x924 <SIM300SendMsg+0x34>
     924:	ed b7       	in	r30, 0x3d	; 61
     926:	fe b7       	in	r31, 0x3e	; 62
     928:	31 96       	adiw	r30, 0x01	; 1
     92a:	7e 01       	movw	r14, r28
     92c:	08 94       	sec
     92e:	e1 1c       	adc	r14, r1
     930:	f1 1c       	adc	r15, r1
     932:	ad b7       	in	r26, 0x3d	; 61
     934:	be b7       	in	r27, 0x3e	; 62
     936:	12 96       	adiw	r26, 0x02	; 2
     938:	fc 92       	st	X, r15
     93a:	ee 92       	st	-X, r14
     93c:	11 97       	sbiw	r26, 0x01	; 1
     93e:	85 e0       	ldi	r24, 0x05	; 5
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	93 83       	std	Z+3, r25	; 0x03
     944:	82 83       	std	Z+2, r24	; 0x02
     946:	d5 82       	std	Z+5, r13	; 0x05
     948:	c4 82       	std	Z+4, r12	; 0x04
     94a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
	
	cmd[8]=0x22; //"
     94e:	22 e2       	ldi	r18, 0x22	; 34
     950:	29 87       	std	Y+9, r18	; 0x09
	
	uint8_t n=strlen(cmd);
     952:	f7 01       	movw	r30, r14
     954:	01 90       	ld	r0, Z+
     956:	00 20       	and	r0, r0
     958:	e9 f7       	brne	.-6      	; 0x954 <SIM300SendMsg+0x64>
     95a:	31 97       	sbiw	r30, 0x01	; 1
	
	cmd[n]=0x22; //"
     95c:	ee 19       	sub	r30, r14
     95e:	8e 2f       	mov	r24, r30
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	f7 01       	movw	r30, r14
     964:	e8 0f       	add	r30, r24
     966:	f9 1f       	adc	r31, r25
     968:	20 83       	st	Z, r18
	cmd[n+1]='\0';
     96a:	8c 0f       	add	r24, r28
     96c:	9d 1f       	adc	r25, r29
     96e:	fc 01       	movw	r30, r24
     970:	12 82       	std	Z+2, r1	; 0x02
	
	//Send Command
	SIM300Cmd(cmd);
     972:	8d b7       	in	r24, 0x3d	; 61
     974:	9e b7       	in	r25, 0x3e	; 62
     976:	06 96       	adiw	r24, 0x06	; 6
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	9e bf       	out	0x3e, r25	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	8d bf       	out	0x3d, r24	; 61
     982:	c7 01       	movw	r24, r14
     984:	0e 94 a4 01 	call	0x348	; 0x348 <SIM300Cmd>
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	91 ee       	ldi	r25, 0xE1	; 225
     98c:	a4 e0       	ldi	r26, 0x04	; 4
     98e:	81 50       	subi	r24, 0x01	; 1
     990:	90 40       	sbci	r25, 0x00	; 0
     992:	a0 40       	sbci	r26, 0x00	; 0
     994:	e1 f7       	brne	.-8      	; 0x98e <SIM300SendMsg+0x9e>
     996:	00 c0       	rjmp	.+0      	; 0x998 <SIM300SendMsg+0xa8>
     998:	00 00       	nop
	
	_delay_ms(100);
	
	UWriteString(msg);
     99a:	c8 01       	movw	r24, r16
     99c:	0e 94 cc 05 	call	0xb98	; 0xb98 <UWriteString>
	
	UWriteData(0x1A);
     9a0:	8a e1       	ldi	r24, 0x1A	; 26
     9a2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <UWriteData>
	
	while(   UDataAvailable()<(strlen(msg)+5)   );
     9a6:	0e 94 aa 05 	call	0xb54	; 0xb54 <UDataAvailable>
     9aa:	f8 01       	movw	r30, r16
     9ac:	01 90       	ld	r0, Z+
     9ae:	00 20       	and	r0, r0
     9b0:	e9 f7       	brne	.-6      	; 0x9ac <SIM300SendMsg+0xbc>
     9b2:	e0 1b       	sub	r30, r16
     9b4:	f1 0b       	sbc	r31, r17
     9b6:	34 96       	adiw	r30, 0x04	; 4
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	8e 17       	cp	r24, r30
     9bc:	9f 07       	cpc	r25, r31
     9be:	98 f3       	brcs	.-26     	; 0x9a6 <SIM300SendMsg+0xb6>
	
	//Remove Echo
	UReadBuffer(sim300_buffer,strlen(msg)+5);
     9c0:	8e ee       	ldi	r24, 0xEE	; 238
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	bf 01       	movw	r22, r30
     9c6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <UReadBuffer>
	
	uint8_t len=SIM300WaitForResponse(6000);
     9ca:	80 e7       	ldi	r24, 0x70	; 112
     9cc:	97 e1       	ldi	r25, 0x17	; 23
     9ce:	0e 94 47 02 	call	0x48e	; 0x48e <SIM300WaitForResponse>
	
	if(len==0)
     9d2:	88 23       	and	r24, r24
     9d4:	49 f1       	breq	.+82     	; 0xa28 <SIM300SendMsg+0x138>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
     9d6:	e8 2f       	mov	r30, r24
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	e3 51       	subi	r30, 0x13	; 19
     9dc:	fd 4f       	sbci	r31, 0xFD	; 253
     9de:	10 82       	st	Z, r1
	
	if(strncasecmp(sim300_buffer+2,"CMGS:",5)==0)
     9e0:	80 ef       	ldi	r24, 0xF0	; 240
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	61 e1       	ldi	r22, 0x11	; 17
     9e6:	71 e0       	ldi	r23, 0x01	; 1
     9e8:	45 e0       	ldi	r20, 0x05	; 5
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	0e 94 d7 08 	call	0x11ae	; 0x11ae <strncasecmp>
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	e1 f4       	brne	.+56     	; 0xa2c <SIM300SendMsg+0x13c>
	{
		
		*msg_ref=atoi(sim300_buffer+8);
     9f4:	86 ef       	ldi	r24, 0xF6	; 246
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	0e 94 94 08 	call	0x1128	; 0x1128 <atoi>
     9fc:	d5 01       	movw	r26, r10
     9fe:	8c 93       	st	X, r24
		
		UFlushBuffer();
     a00:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
		
		return SIM300_OK;
     a04:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		UFlushBuffer();
		return SIM300_FAIL;	
	}		
}
     a06:	69 96       	adiw	r28, 0x19	; 25
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	ef 90       	pop	r14
     a1e:	df 90       	pop	r13
     a20:	cf 90       	pop	r12
     a22:	bf 90       	pop	r11
     a24:	af 90       	pop	r10
     a26:	08 95       	ret
	UReadBuffer(sim300_buffer,strlen(msg)+5);
	
	uint8_t len=SIM300WaitForResponse(6000);
	
	if(len==0)
		return SIM300_TIMEOUT;
     a28:	8d ef       	ldi	r24, 0xFD	; 253
     a2a:	ed cf       	rjmp	.-38     	; 0xa06 <SIM300SendMsg+0x116>
		
		return SIM300_OK;
	}
	else
	{
		UFlushBuffer();
     a2c:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
		return SIM300_FAIL;	
     a30:	8e ef       	ldi	r24, 0xFE	; 254
     a32:	e9 cf       	rjmp	.-46     	; 0xa06 <SIM300SendMsg+0x116>

00000a34 <USARTInit>:
#include "usart.h"

void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	20 93 ad 02 	sts	0x02AD, r18
     a3a:	20 93 ac 02 	sts	0x02AC, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
     a3e:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
     a40:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
     a42:	86 e8       	ldi	r24, 0x86	; 134
     a44:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
     a46:	88 e9       	ldi	r24, 0x98	; 152
     a48:	8a b9       	out	0x0a, r24	; 10
	sei();
     a4a:	78 94       	sei

}
     a4c:	08 95       	ret

00000a4e <__vector_13>:

//The USART ISR
ISR(USART_RXC_VECT)
{
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	2f 93       	push	r18
     a5a:	3f 93       	push	r19
     a5c:	4f 93       	push	r20
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
	//Read the data
	char data=UDR;
     a66:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
     a68:	80 91 ad 02 	lds	r24, 0x02AD
     a6c:	8f 33       	cpi	r24, 0x3F	; 63
     a6e:	89 f1       	breq	.+98     	; 0xad2 <__vector_13+0x84>
     a70:	80 91 ad 02 	lds	r24, 0x02AD
     a74:	20 91 ac 02 	lds	r18, 0x02AC
     a78:	99 27       	eor	r25, r25
     a7a:	87 fd       	sbrc	r24, 7
     a7c:	90 95       	com	r25
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	33 27       	eor	r19, r19
     a82:	27 fd       	sbrc	r18, 7
     a84:	30 95       	com	r19
     a86:	82 17       	cp	r24, r18
     a88:	93 07       	cpc	r25, r19
     a8a:	39 f1       	breq	.+78     	; 0xada <__vector_13+0x8c>
		UQFront++;
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
     a8c:	80 91 ad 02 	lds	r24, 0x02AD
     a90:	8f 33       	cpi	r24, 0x3F	; 63
     a92:	91 f1       	breq	.+100    	; 0xaf8 <__vector_13+0xaa>
		UQEnd=0;
	else
		UQEnd++;
     a94:	80 91 ad 02 	lds	r24, 0x02AD
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	80 93 ad 02 	sts	0x02AD, r24


	URBuff[UQEnd]=data;
     a9e:	e0 91 ad 02 	lds	r30, 0x02AD
     aa2:	ff 27       	eor	r31, r31
     aa4:	e7 fd       	sbrc	r30, 7
     aa6:	f0 95       	com	r31
     aa8:	e2 55       	subi	r30, 0x52	; 82
     aaa:	fd 4f       	sbci	r31, 0xFD	; 253
     aac:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
     aae:	80 91 ac 02 	lds	r24, 0x02AC
     ab2:	8f 3f       	cpi	r24, 0xFF	; 255
     ab4:	11 f4       	brne	.+4      	; 0xaba <__vector_13+0x6c>
     ab6:	10 92 ac 02 	sts	0x02AC, r1

}
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	9f 91       	pop	r25
     ac0:	8f 91       	pop	r24
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	0f 90       	pop	r0
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	0f 90       	pop	r0
     ace:	1f 90       	pop	r1
     ad0:	18 95       	reti
	//Read the data
	char data=UDR;

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
     ad2:	80 91 ac 02 	lds	r24, 0x02AC
     ad6:	88 23       	and	r24, r24
     ad8:	59 f6       	brne	.-106    	; 0xa70 <__vector_13+0x22>
	{
		//Q Full
		UQFront++;
     ada:	80 91 ac 02 	lds	r24, 0x02AC
     ade:	8f 5f       	subi	r24, 0xFF	; 255
     ae0:	80 93 ac 02 	sts	0x02AC, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
     ae4:	80 91 ac 02 	lds	r24, 0x02AC
     ae8:	80 34       	cpi	r24, 0x40	; 64
     aea:	81 f6       	brne	.-96     	; 0xa8c <__vector_13+0x3e>
     aec:	10 92 ac 02 	sts	0x02AC, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
     af0:	80 91 ad 02 	lds	r24, 0x02AD
     af4:	8f 33       	cpi	r24, 0x3F	; 63
     af6:	71 f6       	brne	.-100    	; 0xa94 <__vector_13+0x46>
		UQEnd=0;
     af8:	10 92 ad 02 	sts	0x02AD, r1
     afc:	d0 cf       	rjmp	.-96     	; 0xa9e <__vector_13+0x50>

00000afe <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
     afe:	80 91 ac 02 	lds	r24, 0x02AC
     b02:	8f 3f       	cpi	r24, 0xFF	; 255
     b04:	d9 f0       	breq	.+54     	; 0xb3c <UReadData+0x3e>
		return 0;
	
	data=URBuff[UQFront];
     b06:	e0 91 ac 02 	lds	r30, 0x02AC
     b0a:	ff 27       	eor	r31, r31
     b0c:	e7 fd       	sbrc	r30, 7
     b0e:	f0 95       	com	r31
     b10:	e2 55       	subi	r30, 0x52	; 82
     b12:	fd 4f       	sbci	r31, 0xFD	; 253
     b14:	80 81       	ld	r24, Z
	
	if(UQFront==UQEnd)
     b16:	20 91 ac 02 	lds	r18, 0x02AC
     b1a:	90 91 ad 02 	lds	r25, 0x02AD
     b1e:	29 17       	cp	r18, r25
     b20:	79 f0       	breq	.+30     	; 0xb40 <UReadData+0x42>
	//So empty q
	UQFront=UQEnd=-1;
	}
	else
	{
		UQFront++;
     b22:	90 91 ac 02 	lds	r25, 0x02AC
     b26:	9f 5f       	subi	r25, 0xFF	; 255
     b28:	90 93 ac 02 	sts	0x02AC, r25

		if(UQFront==RECEIVE_BUFF_SIZE)
     b2c:	90 91 ac 02 	lds	r25, 0x02AC
     b30:	90 34       	cpi	r25, 0x40	; 64
     b32:	09 f0       	breq	.+2      	; 0xb36 <UReadData+0x38>
		UQFront=0;
	}

	return data;
}
     b34:	08 95       	ret
	else
	{
		UQFront++;

		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
     b36:	10 92 ac 02 	sts	0x02AC, r1
     b3a:	08 95       	ret
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
		return 0;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
     b3e:	08 95       	ret
	
	if(UQFront==UQEnd)
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	90 93 ad 02 	sts	0x02AD, r25
     b46:	90 93 ac 02 	sts	0x02AC, r25
     b4a:	08 95       	ret

00000b4c <UWriteData>:
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     b4c:	5d 9b       	sbis	0x0b, 5	; 11
     b4e:	fe cf       	rjmp	.-4      	; 0xb4c <UWriteData>

	//Now write
	UDR=data;
     b50:	8c b9       	out	0x0c, r24	; 12
}
     b52:	08 95       	ret

00000b54 <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
     b54:	80 91 ac 02 	lds	r24, 0x02AC
     b58:	8f 3f       	cpi	r24, 0xFF	; 255
     b5a:	d1 f0       	breq	.+52     	; 0xb90 <UDataAvailable+0x3c>
	if(UQFront<UQEnd)
     b5c:	90 91 ac 02 	lds	r25, 0x02AC
     b60:	80 91 ad 02 	lds	r24, 0x02AD
     b64:	98 17       	cp	r25, r24
     b66:	6c f0       	brlt	.+26     	; 0xb82 <UDataAvailable+0x2e>
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
     b68:	90 91 ac 02 	lds	r25, 0x02AC
     b6c:	80 91 ad 02 	lds	r24, 0x02AD
     b70:	89 17       	cp	r24, r25
     b72:	84 f4       	brge	.+32     	; 0xb94 <UDataAvailable+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
     b74:	80 91 ad 02 	lds	r24, 0x02AD
     b78:	90 91 ac 02 	lds	r25, 0x02AC
     b7c:	8f 5b       	subi	r24, 0xBF	; 191
     b7e:	89 1b       	sub	r24, r25
     b80:	08 95       	ret

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
     b82:	80 91 ad 02 	lds	r24, 0x02AD
     b86:	90 91 ac 02 	lds	r25, 0x02AC
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	89 1b       	sub	r24, r25
     b8e:	08 95       	ret
	UDR=data;
}

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	08 95       	ret
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
}
     b96:	08 95       	ret

00000b98 <UWriteString>:

void UWriteString(char *str)
{
     b98:	fc 01       	movw	r30, r24
	while((*str)!='\0')
     b9a:	80 81       	ld	r24, Z
     b9c:	88 23       	and	r24, r24
     b9e:	39 f0       	breq	.+14     	; 0xbae <UWriteString+0x16>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}

void UWriteString(char *str)
     ba0:	31 96       	adiw	r30, 0x01	; 1
}

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
     ba2:	5d 9b       	sbis	0x0b, 5	; 11
     ba4:	fe cf       	rjmp	.-4      	; 0xba2 <UWriteString+0xa>

	//Now write
	UDR=data;
     ba6:	8c b9       	out	0x0c, r24	; 12
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
     ba8:	81 91       	ld	r24, Z+
     baa:	88 23       	and	r24, r24
     bac:	d1 f7       	brne	.-12     	; 0xba2 <UWriteString+0xa>
     bae:	08 95       	ret

00000bb0 <UReadBuffer>:
		str++;
	}
}

void UReadBuffer(void *buff,uint16_t len)
{
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	eb 01       	movw	r28, r22
	uint16_t i;
	for(i=0;i<len;i++)
     bbe:	20 97       	sbiw	r28, 0x00	; 0
     bc0:	69 f0       	breq	.+26     	; 0xbdc <UReadBuffer+0x2c>
     bc2:	7c 01       	movw	r14, r24
     bc4:	00 e0       	ldi	r16, 0x00	; 0
     bc6:	10 e0       	ldi	r17, 0x00	; 0
	{
		((char*)buff)[i]=UReadData();
     bc8:	0e 94 7f 05 	call	0xafe	; 0xafe <UReadData>
     bcc:	f7 01       	movw	r30, r14
     bce:	81 93       	st	Z+, r24
     bd0:	7f 01       	movw	r14, r30
}

void UReadBuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
     bd2:	0f 5f       	subi	r16, 0xFF	; 255
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
     bd6:	0c 17       	cp	r16, r28
     bd8:	1d 07       	cpc	r17, r29
     bda:	b1 f7       	brne	.-20     	; 0xbc8 <UReadBuffer+0x18>
	{
		((char*)buff)[i]=UReadData();
	}
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	08 95       	ret

00000bea <UFlushBuffer>:
void UFlushBuffer()
{
	while(UDataAvailable()>0)
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <UFlushBuffer+0x6>
	{
		UReadData();
     bec:	0e 94 7f 05 	call	0xafe	; 0xafe <UReadData>
		((char*)buff)[i]=UReadData();
	}
}
void UFlushBuffer()
{
	while(UDataAvailable()>0)
     bf0:	0e 94 aa 05 	call	0xb54	; 0xb54 <UDataAvailable>
     bf4:	88 23       	and	r24, r24
     bf6:	d1 f7       	brne	.-12     	; 0xbec <UFlushBuffer+0x2>
	{
		UReadData();
	}
}
     bf8:	08 95       	ret

00000bfa <Halt>:
	
	Halt();
}

void Halt()
{
     bfa:	ff cf       	rjmp	.-2      	; 0xbfa <Halt>

00000bfc <main>:
#include "lib/sim300/sim300.h"


void Halt();
int main(void)
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	cf 5b       	subi	r28, 0xBF	; 191
     c06:	d1 40       	sbci	r29, 0x01	; 1
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
	//Initialize LCD Module
	LCDInit(LS_NONE);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDInit>
	
	//Intro Message
	LCDWriteString("SIM300 Demo !");
     c18:	87 e1       	ldi	r24, 0x17	; 23
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
	LCDWriteStringXY(0,1,"By Avinash Gupta");
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     c28:	85 e2       	ldi	r24, 0x25	; 37
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     c30:	2f ef       	ldi	r18, 0xFF	; 255
     c32:	33 ed       	ldi	r19, 0xD3	; 211
     c34:	40 e3       	ldi	r20, 0x30	; 48
     c36:	21 50       	subi	r18, 0x01	; 1
     c38:	30 40       	sbci	r19, 0x00	; 0
     c3a:	40 40       	sbci	r20, 0x00	; 0
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <main+0x3a>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <main+0x44>
     c40:	00 00       	nop
	
	_delay_ms(1000);
	
	LCDClear();
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	
	
	//Initialize SIM300 module
	LCDWriteString("Initializing ...");
     c4a:	86 e3       	ldi	r24, 0x36	; 54
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
	int8_t r= SIM300Init();
     c52:	0e 94 1b 02 	call	0x436	; 0x436 <SIM300Init>
     c56:	2f ef       	ldi	r18, 0xFF	; 255
     c58:	33 ed       	ldi	r19, 0xD3	; 211
     c5a:	40 e3       	ldi	r20, 0x30	; 48
     c5c:	21 50       	subi	r18, 0x01	; 1
     c5e:	30 40       	sbci	r19, 0x00	; 0
     c60:	40 40       	sbci	r20, 0x00	; 0
     c62:	e1 f7       	brne	.-8      	; 0xc5c <main+0x60>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <main+0x6a>
     c66:	00 00       	nop
	
	_delay_ms(1000);
	
	//Check the status of initialization
	switch(r)
     c68:	8e 3f       	cpi	r24, 0xFE	; 254
     c6a:	09 f4       	brne	.+2      	; 0xc6e <main+0x72>
     c6c:	02 c1       	rjmp	.+516    	; 0xe72 <main+0x276>
     c6e:	8f 3f       	cpi	r24, 0xFF	; 255
     c70:	64 f4       	brge	.+24     	; 0xc8a <main+0x8e>
     c72:	8d 3f       	cpi	r24, 0xFD	; 253
     c74:	09 f4       	brne	.+2      	; 0xc78 <main+0x7c>
     c76:	0d c2       	rjmp	.+1050   	; 0x1092 <main+0x496>
			Halt();
		case SIM300_FAIL:
			LCDWriteStringXY(0,1,"Fail");
			Halt();
		default:
			LCDWriteStringXY(0,1,"Unknown Error");
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     c80:	8a e6       	ldi	r24, 0x6A	; 106
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     c88:	ff cf       	rjmp	.-2      	; 0xc88 <main+0x8c>
	int8_t r= SIM300Init();
	
	_delay_ms(1000);
	
	//Check the status of initialization
	switch(r)
     c8a:	8f 3f       	cpi	r24, 0xFF	; 255
     c8c:	09 f4       	brne	.+2      	; 0xc90 <main+0x94>
     c8e:	f8 c1       	rjmp	.+1008   	; 0x1080 <main+0x484>
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	91 f7       	brne	.-28     	; 0xc78 <main+0x7c>
	{
		case SIM300_OK:
			LCDWriteStringXY(0,1,"OK !");
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     c9c:	87 e4       	ldi	r24, 0x47	; 71
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	93 ed       	ldi	r25, 0xD3	; 211
     ca8:	a0 e3       	ldi	r26, 0x30	; 48
     caa:	81 50       	subi	r24, 0x01	; 1
     cac:	90 40       	sbci	r25, 0x00	; 0
     cae:	a0 40       	sbci	r26, 0x00	; 0
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <main+0xae>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <main+0xb8>
     cb4:	00 00       	nop
	}
	
	_delay_ms(1000);
	
	//IMEI No display
	LCDClear();
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	
	char imei[16];
	
	r=SIM300GetIMEI(imei);
     cbe:	ce 01       	movw	r24, r28
     cc0:	03 96       	adiw	r24, 0x03	; 3
     cc2:	0e 94 13 03 	call	0x626	; 0x626 <SIM300GetIMEI>
	
	if(r==SIM300_TIMEOUT)
     cc6:	8d 3f       	cpi	r24, 0xFD	; 253
     cc8:	09 f4       	brne	.+2      	; 0xccc <main+0xd0>
     cca:	d5 c1       	rjmp	.+938    	; 0x1076 <main+0x47a>
	{
		LCDWriteString("Comm Error !");
		Halt();
	}
	
	LCDWriteString("Device IMEI:");
     ccc:	85 e8       	ldi	r24, 0x85	; 133
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
	LCDWriteStringXY(0,1,imei);
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     cdc:	ce 01       	movw	r24, r28
     cde:	03 96       	adiw	r24, 0x03	; 3
     ce0:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     ce4:	2f ef       	ldi	r18, 0xFF	; 255
     ce6:	33 ed       	ldi	r19, 0xD3	; 211
     ce8:	40 e3       	ldi	r20, 0x30	; 48
     cea:	21 50       	subi	r18, 0x01	; 1
     cec:	30 40       	sbci	r19, 0x00	; 0
     cee:	40 40       	sbci	r20, 0x00	; 0
     cf0:	e1 f7       	brne	.-8      	; 0xcea <main+0xee>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <main+0xf8>
     cf4:	00 00       	nop
	
	_delay_ms(1000);
	
	//Manufacturer ID
	LCDClear();
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	
	char man_id[48];
	
	r=SIM300GetManufacturer(man_id);
     cfe:	ce 01       	movw	r24, r28
     d00:	8d 59       	subi	r24, 0x9D	; 157
     d02:	9f 4f       	sbci	r25, 0xFF	; 255
     d04:	0e 94 32 03 	call	0x664	; 0x664 <SIM300GetManufacturer>
	
	if(r==SIM300_TIMEOUT)
     d08:	8d 3f       	cpi	r24, 0xFD	; 253
     d0a:	09 f4       	brne	.+2      	; 0xd0e <main+0x112>
     d0c:	af c1       	rjmp	.+862    	; 0x106c <main+0x470>
	{
		LCDWriteString("Comm Error !");
		Halt();
	}
	
	LCDWriteString("Manufacturer:");
     d0e:	82 e9       	ldi	r24, 0x92	; 146
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
	LCDWriteStringXY(0,1,man_id);
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     d1e:	ce 01       	movw	r24, r28
     d20:	8d 59       	subi	r24, 0x9D	; 157
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	93 ed       	ldi	r25, 0xD3	; 211
     d2c:	a0 e3       	ldi	r26, 0x30	; 48
     d2e:	81 50       	subi	r24, 0x01	; 1
     d30:	90 40       	sbci	r25, 0x00	; 0
     d32:	a0 40       	sbci	r26, 0x00	; 0
     d34:	e1 f7       	brne	.-8      	; 0xd2e <main+0x132>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <main+0x13c>
     d38:	00 00       	nop
	
	_delay_ms(1000);
	
	//Manufacturer ID
	LCDClear();
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	
	char model[48];
	
	r=SIM300GetModel(model);
     d42:	ce 01       	movw	r24, r28
     d44:	c3 96       	adiw	r24, 0x33	; 51
     d46:	0e 94 51 03 	call	0x6a2	; 0x6a2 <SIM300GetModel>
	
	if(r==SIM300_TIMEOUT)
     d4a:	8d 3f       	cpi	r24, 0xFD	; 253
     d4c:	09 f4       	brne	.+2      	; 0xd50 <main+0x154>
     d4e:	b2 c1       	rjmp	.+868    	; 0x10b4 <main+0x4b8>
	{
		LCDWriteString("Comm Error !");
		Halt();
	}
	
	LCDWriteString("Model:");
     d50:	80 ea       	ldi	r24, 0xA0	; 160
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
	LCDWriteStringXY(0,1,model);
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     d60:	ce 01       	movw	r24, r28
     d62:	c3 96       	adiw	r24, 0x33	; 51
     d64:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     d68:	2f ef       	ldi	r18, 0xFF	; 255
     d6a:	33 ed       	ldi	r19, 0xD3	; 211
     d6c:	40 e3       	ldi	r20, 0x30	; 48
     d6e:	21 50       	subi	r18, 0x01	; 1
     d70:	30 40       	sbci	r19, 0x00	; 0
     d72:	40 40       	sbci	r20, 0x00	; 0
     d74:	e1 f7       	brne	.-8      	; 0xd6e <main+0x172>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <main+0x17c>
     d78:	00 00       	nop
	_delay_ms(1000);
	

	
	//Check Sim Card Presence
	LCDClear();
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDWriteString("Checking SIMCard");
     d82:	87 ea       	ldi	r24, 0xA7	; 167
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	93 ed       	ldi	r25, 0xD3	; 211
     d8e:	a0 e3       	ldi	r26, 0x30	; 48
     d90:	81 50       	subi	r24, 0x01	; 1
     d92:	90 40       	sbci	r25, 0x00	; 0
     d94:	a0 40       	sbci	r26, 0x00	; 0
     d96:	e1 f7       	brne	.-8      	; 0xd90 <main+0x194>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <main+0x19e>
     d9a:	00 00       	nop
	
	_delay_ms(1000);
	
	r=SIM300IsSIMInserted();
     d9c:	0e 94 b6 02 	call	0x56c	; 0x56c <SIM300IsSIMInserted>
	
	if (r==SIM300_SIM_NOT_PRESENT)
     da0:	88 23       	and	r24, r24
     da2:	09 f4       	brne	.+2      	; 0xda6 <main+0x1aa>
     da4:	7f c1       	rjmp	.+766    	; 0x10a4 <main+0x4a8>
		//Sim card is NOT present
		LCDWriteStringXY(0,1,"No SIM Card !");
		
		Halt();
	}
	else if(r==SIM300_TIMEOUT)
     da6:	8d 3f       	cpi	r24, 0xFD	; 253
     da8:	09 f4       	brne	.+2      	; 0xdac <main+0x1b0>
     daa:	89 c1       	rjmp	.+786    	; 0x10be <main+0x4c2>
		//Communication Error
		LCDWriteStringXY(0,1,"Comm Error !");
		
		Halt();
	}
	else if(r==SIM300_SIM_PRESENT)
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	89 f4       	brne	.+34     	; 0xdd2 <main+0x1d6>
	{
		//Sim card present
		LCDWriteStringXY(0,1,"SIM Card Present");
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     db8:	86 ec       	ldi	r24, 0xC6	; 198
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     dc0:	2f ef       	ldi	r18, 0xFF	; 255
     dc2:	33 ed       	ldi	r19, 0xD3	; 211
     dc4:	40 e3       	ldi	r20, 0x30	; 48
     dc6:	21 50       	subi	r18, 0x01	; 1
     dc8:	30 40       	sbci	r19, 0x00	; 0
     dca:	40 40       	sbci	r20, 0x00	; 0
     dcc:	e1 f7       	brne	.-8      	; 0xdc6 <main+0x1ca>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <main+0x1d4>
     dd0:	00 00       	nop
			
		_delay_ms(1000);
	}
	
	//Network search
	LCDClear();
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDWriteStringXY(0,0,"SearchingNetwork");
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     de2:	87 ed       	ldi	r24, 0xD7	; 215
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
	
	uint8_t		nw_found=0;
	uint16_t	tries=0;
	uint8_t		x=0;
	
	while(!nw_found)
     dea:	08 e5       	ldi	r16, 0x58	; 88
     dec:	12 e0       	ldi	r17, 0x02	; 2
	LCDClear();
	LCDWriteStringXY(0,0,"SearchingNetwork");
	
	uint8_t		nw_found=0;
	uint16_t	tries=0;
	uint8_t		x=0;
     dee:	ff 24       	eor	r15, r15
	
	while(!nw_found)
     df0:	26 c0       	rjmp	.+76     	; 0xe3e <main+0x242>
	{
		r=SIM300GetNetStat();
		
		if(r==SIM300_NW_SEARCHING)
		{
			LCDWriteStringXY(0,1,"%0%0%0%0%0%0%0%0%0%0%0%0%0%0%0%0");
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     dfa:	88 ee       	ldi	r24, 0xE8	; 232
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
			LCDWriteStringXY(x,1,"%1");
     e02:	8f 2d       	mov	r24, r15
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     e0a:	89 e0       	ldi	r24, 0x09	; 9
     e0c:	92 e0       	ldi	r25, 0x02	; 2
     e0e:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
			LCDGotoXY(17,1);
     e12:	81 e1       	ldi	r24, 0x11	; 17
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
			
			x++;
     e1a:	f3 94       	inc	r15
			
			if(x==16) x=0;
     e1c:	30 e1       	ldi	r19, 0x10	; 16
     e1e:	f3 16       	cp	r15, r19
     e20:	09 f4       	brne	.+2      	; 0xe24 <main+0x228>
     e22:	ff 24       	eor	r15, r15
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	90 e7       	ldi	r25, 0x70	; 112
     e28:	a2 e0       	ldi	r26, 0x02	; 2
     e2a:	81 50       	subi	r24, 0x01	; 1
     e2c:	90 40       	sbci	r25, 0x00	; 0
     e2e:	a0 40       	sbci	r26, 0x00	; 0
     e30:	e1 f7       	brne	.-8      	; 0xe2a <main+0x22e>
     e32:	00 c0       	rjmp	.+0      	; 0xe34 <main+0x238>
     e34:	00 00       	nop
     e36:	01 50       	subi	r16, 0x01	; 1
     e38:	10 40       	sbci	r17, 0x00	; 0
			
			_delay_ms(50);
			
			tries++;
			
			if(tries==600)	
     e3a:	09 f4       	brne	.+2      	; 0xe3e <main+0x242>
     e3c:	49 c1       	rjmp	.+658    	; 0x10d0 <main+0x4d4>
	uint16_t	tries=0;
	uint8_t		x=0;
	
	while(!nw_found)
	{
		r=SIM300GetNetStat();
     e3e:	0e 94 80 02 	call	0x500	; 0x500 <SIM300GetNetStat>
     e42:	98 2f       	mov	r25, r24
		
		if(r==SIM300_NW_SEARCHING)
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	a9 f2       	breq	.-86     	; 0xdf2 <main+0x1f6>
		}
		else
			break;	
		 
	}
	LCDClear();
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	c1 54       	subi	r28, 0x41	; 65
     e4e:	de 4f       	sbci	r29, 0xFE	; 254
     e50:	98 83       	st	Y, r25
     e52:	cf 5b       	subi	r28, 0xBF	; 191
     e54:	d1 40       	sbci	r29, 0x01	; 1
     e56:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	
	if(r==SIM300_NW_REGISTERED_HOME)
     e5a:	c1 54       	subi	r28, 0x41	; 65
     e5c:	de 4f       	sbci	r29, 0xFE	; 254
     e5e:	98 81       	ld	r25, Y
     e60:	cf 5b       	subi	r28, 0xBF	; 191
     e62:	d1 40       	sbci	r29, 0x01	; 1
     e64:	91 30       	cpi	r25, 0x01	; 1
     e66:	71 f0       	breq	.+28     	; 0xe84 <main+0x288>
	{
		LCDWriteString("Network Found");
	}
	else
	{
		LCDWriteString("Cant Connt to NW!");
     e68:	8a e1       	ldi	r24, 0x1A	; 26
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     e70:	ff cf       	rjmp	.-2      	; 0xe70 <main+0x274>
			Halt();
		case SIM300_INVALID_RESPONSE:
			LCDWriteStringXY(0,1,"Inv response");
			Halt();
		case SIM300_FAIL:
			LCDWriteStringXY(0,1,"Fail");
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     e7a:	85 e6       	ldi	r24, 0x65	; 101
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     e82:	ff cf       	rjmp	.-2      	; 0xe82 <main+0x286>
	}
	LCDClear();
	
	if(r==SIM300_NW_REGISTERED_HOME)
	{
		LCDWriteString("Network Found");
     e84:	8c e0       	ldi	r24, 0x0C	; 12
     e86:	92 e0       	ldi	r25, 0x02	; 2
     e88:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     e8c:	2f ef       	ldi	r18, 0xFF	; 255
     e8e:	33 ed       	ldi	r19, 0xD3	; 211
     e90:	40 e3       	ldi	r20, 0x30	; 48
     e92:	21 50       	subi	r18, 0x01	; 1
     e94:	30 40       	sbci	r19, 0x00	; 0
     e96:	40 40       	sbci	r20, 0x00	; 0
     e98:	e1 f7       	brne	.-8      	; 0xe92 <main+0x296>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <main+0x2a0>
     e9c:	00 00       	nop
		Halt();
	}
	
	_delay_ms(1000);
	
	LCDClear();
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	
	//Show Provider Name
	char pname[32];
	r=SIM300GetProviderName(pname);
     ea6:	ce 01       	movw	r24, r28
     ea8:	43 96       	adiw	r24, 0x13	; 19
     eaa:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SIM300GetProviderName>
	
	if(r==0)
     eae:	88 23       	and	r24, r24
     eb0:	29 f4       	brne	.+10     	; 0xebc <main+0x2c0>
	{
		LCDWriteString("Comm Error !");
     eb2:	88 e7       	ldi	r24, 0x78	; 120
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     eba:	ff cf       	rjmp	.-2      	; 0xeba <main+0x2be>
		Halt();
	}
	
	LCDWriteString(pname);
     ebc:	ce 01       	movw	r24, r28
     ebe:	43 96       	adiw	r24, 0x13	; 19
     ec0:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	93 ed       	ldi	r25, 0xD3	; 211
     ec8:	a0 e3       	ldi	r26, 0x30	; 48
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	90 40       	sbci	r25, 0x00	; 0
     ece:	a0 40       	sbci	r26, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <main+0x2ce>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <main+0x2d8>
     ed4:	00 00       	nop
		
	_delay_ms(1000);
	
	//Send MSG
	LCDClear();
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	LCDWriteString("Sending Msg");
     ede:	8c e2       	ldi	r24, 0x2C	; 44
     ee0:	92 e0       	ldi	r25, 0x02	; 2
     ee2:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
	
	uint8_t ref;
	

	r=SIM300SendMsg("+919939XXXXXX","Test",&ref);//Change phone number to some valid value!
     ee6:	88 e3       	ldi	r24, 0x38	; 56
     ee8:	92 e0       	ldi	r25, 0x02	; 2
     eea:	66 e4       	ldi	r22, 0x46	; 70
     eec:	72 e0       	ldi	r23, 0x02	; 2
     eee:	ae 01       	movw	r20, r28
     ef0:	4e 5f       	subi	r20, 0xFE	; 254
     ef2:	5f 4f       	sbci	r21, 0xFF	; 255
     ef4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <SIM300SendMsg>
	
	if(r==SIM300_OK)
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	09 f4       	brne	.+2      	; 0xefe <main+0x302>
     efc:	a4 c0       	rjmp	.+328    	; 0x1046 <main+0x44a>
	{
		LCDWriteStringXY(0,1,"Success");
		LCDWriteIntXY(9,1,ref,3);
	}
	else if(r==SIM300_TIMEOUT)
     efe:	8d 3f       	cpi	r24, 0xFD	; 253
     f00:	09 f4       	brne	.+2      	; 0xf04 <main+0x308>
     f02:	98 c0       	rjmp	.+304    	; 0x1034 <main+0x438>
	{
		LCDWriteStringXY(0,1,"Time out !");
	}
	else
	{
		LCDWriteStringXY(0,1,"Fail  !");	
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     f0c:	8e e5       	ldi	r24, 0x5E	; 94
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     f14:	2f ef       	ldi	r18, 0xFF	; 255
     f16:	37 ea       	ldi	r19, 0xA7	; 167
     f18:	41 e6       	ldi	r20, 0x61	; 97
     f1a:	21 50       	subi	r18, 0x01	; 1
     f1c:	30 40       	sbci	r19, 0x00	; 0
     f1e:	40 40       	sbci	r20, 0x00	; 0
     f20:	e1 f7       	brne	.-8      	; 0xf1a <main+0x31e>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <main+0x328>
     f24:	00 00       	nop
	_delay_ms(2000);
	
	//Wait for MSG
	uint8_t id;
	
	UFlushBuffer();
     f26:	0e 94 f5 05 	call	0xbea	; 0xbea <UFlushBuffer>
	
	while(1)
	{
		LCDClear();
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
	
		LCDWriteStringXY(0,0,"Waiting for msg");
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     f3a:	86 e6       	ldi	r24, 0x66	; 102
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
	
		x=0;
		int8_t vx=1;
     f42:	11 e0       	ldi	r17, 0x01	; 1
	{
		LCDClear();
	
		LCDWriteStringXY(0,0,"Waiting for msg");
	
		x=0;
     f44:	00 e0       	ldi	r16, 0x00	; 0
		int8_t vx=1;
		
		while(SIM300WaitForMsg(&id)!=SIM300_OK)
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	0e 94 c5 03 	call	0x78a	; 0x78a <SIM300WaitForMsg>
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	01 f1       	breq	.+64     	; 0xf92 <main+0x396>
		{
			LCDWriteStringXY(0,1,"%0%0%0%0%0%0%0%0%0%0%0%0%0%0%0%0");
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     f5a:	88 ee       	ldi	r24, 0xE8	; 232
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
			LCDWriteStringXY(x,1,"%1");
     f62:	80 2f       	mov	r24, r16
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     f6a:	89 e0       	ldi	r24, 0x09	; 9
     f6c:	92 e0       	ldi	r25, 0x02	; 2
     f6e:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
			LCDGotoXY(17,1);
     f72:	81 e1       	ldi	r24, 0x11	; 17
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
			
			x+=vx;
     f7a:	01 0f       	add	r16, r17
			
			if(x==15 || x==0) vx=vx*-1;
     f7c:	0f 30       	cpi	r16, 0x0F	; 15
     f7e:	11 f0       	breq	.+4      	; 0xf84 <main+0x388>
     f80:	00 23       	and	r16, r16
     f82:	09 f7       	brne	.-62     	; 0xf46 <main+0x34a>
     f84:	11 95       	neg	r17
		LCDWriteStringXY(0,0,"Waiting for msg");
	
		x=0;
		int8_t vx=1;
		
		while(SIM300WaitForMsg(&id)!=SIM300_OK)
     f86:	ce 01       	movw	r24, r28
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	0e 94 c5 03 	call	0x78a	; 0x78a <SIM300WaitForMsg>
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	01 f7       	brne	.-64     	; 0xf52 <main+0x356>
			x+=vx;
			
			if(x==15 || x==0) vx=vx*-1;
		}
	
		LCDWriteStringXY(0,1,"MSG Received    ");
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
     f9a:	86 e7       	ldi	r24, 0x76	; 118
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	93 ed       	ldi	r25, 0xD3	; 211
     fa6:	a0 e3       	ldi	r26, 0x30	; 48
     fa8:	81 50       	subi	r24, 0x01	; 1
     faa:	90 40       	sbci	r25, 0x00	; 0
     fac:	a0 40       	sbci	r26, 0x00	; 0
     fae:	e1 f7       	brne	.-8      	; 0xfa8 <main+0x3ac>
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <main+0x3b6>
     fb2:	00 00       	nop
		
		_delay_ms(1000);
		
		//Now read and display msg
		LCDClear();
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
		char msg[300];
		
		r=SIM300ReadMsg(id,msg);
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	be 01       	movw	r22, r28
     fc0:	6d 56       	subi	r22, 0x6D	; 109
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	0e 94 04 04 	call	0x808	; 0x808 <SIM300ReadMsg>
		
		if(r==SIM300_OK)
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	09 f1       	breq	.+66     	; 0x100e <main+0x412>
			_delay_ms(3000);
			
		}	
		else
		{
			LCDWriteString("Err Reading Msg !");
     fcc:	87 e8       	ldi	r24, 0x87	; 135
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	9b e7       	ldi	r25, 0x7B	; 123
     fd8:	a2 e9       	ldi	r26, 0x92	; 146
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	90 40       	sbci	r25, 0x00	; 0
     fde:	a0 40       	sbci	r26, 0x00	; 0
     fe0:	e1 f7       	brne	.-8      	; 0xfda <main+0x3de>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <main+0x3e8>
     fe4:	00 00       	nop
			_delay_ms(3000);
			
		}
		
		//Finally delete the msg
		if (SIM300DeleteMsg(id)!=SIM300_OK)
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <SIM300DeleteMsg>
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	09 f4       	brne	.+2      	; 0xff2 <main+0x3f6>
     ff0:	9c cf       	rjmp	.-200    	; 0xf2a <main+0x32e>
		{
			LCDWriteString("Err Deleting Msg !");
     ff2:	89 e9       	ldi	r24, 0x99	; 153
     ff4:	92 e0       	ldi	r25, 0x02	; 2
     ff6:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
     ffa:	2f ef       	ldi	r18, 0xFF	; 255
     ffc:	3b e7       	ldi	r19, 0x7B	; 123
     ffe:	42 e9       	ldi	r20, 0x92	; 146
    1000:	21 50       	subi	r18, 0x01	; 1
    1002:	30 40       	sbci	r19, 0x00	; 0
    1004:	40 40       	sbci	r20, 0x00	; 0
    1006:	e1 f7       	brne	.-8      	; 0x1000 <main+0x404>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <main+0x40e>
    100a:	00 00       	nop
    100c:	8e cf       	rjmp	.-228    	; 0xf2a <main+0x32e>
		r=SIM300ReadMsg(id,msg);
		
		if(r==SIM300_OK)
		{
			
			LCDWriteStringXY(0,0,msg);
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
    1016:	ce 01       	movw	r24, r28
    1018:	8d 56       	subi	r24, 0x6D	; 109
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
    1020:	2f ef       	ldi	r18, 0xFF	; 255
    1022:	3b e7       	ldi	r19, 0x7B	; 123
    1024:	42 e9       	ldi	r20, 0x92	; 146
    1026:	21 50       	subi	r18, 0x01	; 1
    1028:	30 40       	sbci	r19, 0x00	; 0
    102a:	40 40       	sbci	r20, 0x00	; 0
    102c:	e1 f7       	brne	.-8      	; 0x1026 <main+0x42a>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <main+0x434>
    1030:	00 00       	nop
    1032:	d9 cf       	rjmp	.-78     	; 0xfe6 <main+0x3ea>
		LCDWriteStringXY(0,1,"Success");
		LCDWriteIntXY(9,1,ref,3);
	}
	else if(r==SIM300_TIMEOUT)
	{
		LCDWriteStringXY(0,1,"Time out !");
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
    103c:	83 e5       	ldi	r24, 0x53	; 83
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
    1044:	67 cf       	rjmp	.-306    	; 0xf14 <main+0x318>

	r=SIM300SendMsg("+919939XXXXXX","Test",&ref);//Change phone number to some valid value!
	
	if(r==SIM300_OK)
	{
		LCDWriteStringXY(0,1,"Success");
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
    104e:	8b e4       	ldi	r24, 0x4B	; 75
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
		LCDWriteIntXY(9,1,ref,3);
    1056:	89 e0       	ldi	r24, 0x09	; 9
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	63 e0       	ldi	r22, 0x03	; 3
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCDWriteInt>
    106a:	54 cf       	rjmp	.-344    	; 0xf14 <main+0x318>
	
	r=SIM300GetManufacturer(man_id);
	
	if(r==SIM300_TIMEOUT)
	{
		LCDWriteString("Comm Error !");
    106c:	88 e7       	ldi	r24, 0x78	; 120
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
    1074:	ff cf       	rjmp	.-2      	; 0x1074 <main+0x478>
	
	r=SIM300GetIMEI(imei);
	
	if(r==SIM300_TIMEOUT)
	{
		LCDWriteString("Comm Error !");
    1076:	88 e7       	ldi	r24, 0x78	; 120
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
    107e:	ff cf       	rjmp	.-2      	; 0x107e <main+0x482>
			break; 
		case SIM300_TIMEOUT:
			LCDWriteStringXY(0,1,"No response");
			Halt();
		case SIM300_INVALID_RESPONSE:
			LCDWriteStringXY(0,1,"Inv response");
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
    1088:	88 e5       	ldi	r24, 0x58	; 88
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
    1090:	ff cf       	rjmp	.-2      	; 0x1090 <main+0x494>
	{
		case SIM300_OK:
			LCDWriteStringXY(0,1,"OK !");
			break; 
		case SIM300_TIMEOUT:
			LCDWriteStringXY(0,1,"No response");
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
    109a:	8c e4       	ldi	r24, 0x4C	; 76
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
    10a2:	ff cf       	rjmp	.-2      	; 0x10a2 <main+0x4a6>
	r=SIM300IsSIMInserted();
	
	if (r==SIM300_SIM_NOT_PRESENT)
	{
		//Sim card is NOT present
		LCDWriteStringXY(0,1,"No SIM Card !");
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
    10aa:	88 eb       	ldi	r24, 0xB8	; 184
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
    10b2:	ff cf       	rjmp	.-2      	; 0x10b2 <main+0x4b6>
	
	r=SIM300GetModel(model);
	
	if(r==SIM300_TIMEOUT)
	{
		LCDWriteString("Comm Error !");
    10b4:	88 e7       	ldi	r24, 0x78	; 120
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
    10bc:	ff cf       	rjmp	.-2      	; 0x10bc <main+0x4c0>
		Halt();
	}
	else if(r==SIM300_TIMEOUT)
	{
		//Communication Error
		LCDWriteStringXY(0,1,"Comm Error !");
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	61 e0       	ldi	r22, 0x01	; 1
    10c2:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
    10c6:	88 e7       	ldi	r24, 0x78	; 120
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	0e 94 a5 00 	call	0x14a	; 0x14a <LCDWriteString>
    10ce:	ff cf       	rjmp	.-2      	; 0x10ce <main+0x4d2>
		}
		else
			break;	
		 
	}
	LCDClear();
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	0e 94 79 00 	call	0xf2	; 0xf2 <LCDByte>
    10d8:	c7 ce       	rjmp	.-626    	; 0xe68 <main+0x26c>

000010da <__divmodhi4>:
    10da:	97 fb       	bst	r25, 7
    10dc:	09 2e       	mov	r0, r25
    10de:	07 26       	eor	r0, r23
    10e0:	0a d0       	rcall	.+20     	; 0x10f6 <__divmodhi4_neg1>
    10e2:	77 fd       	sbrc	r23, 7
    10e4:	04 d0       	rcall	.+8      	; 0x10ee <__divmodhi4_neg2>
    10e6:	0c d0       	rcall	.+24     	; 0x1100 <__udivmodhi4>
    10e8:	06 d0       	rcall	.+12     	; 0x10f6 <__divmodhi4_neg1>
    10ea:	00 20       	and	r0, r0
    10ec:	1a f4       	brpl	.+6      	; 0x10f4 <__divmodhi4_exit>

000010ee <__divmodhi4_neg2>:
    10ee:	70 95       	com	r23
    10f0:	61 95       	neg	r22
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255

000010f4 <__divmodhi4_exit>:
    10f4:	08 95       	ret

000010f6 <__divmodhi4_neg1>:
    10f6:	f6 f7       	brtc	.-4      	; 0x10f4 <__divmodhi4_exit>
    10f8:	90 95       	com	r25
    10fa:	81 95       	neg	r24
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	08 95       	ret

00001100 <__udivmodhi4>:
    1100:	aa 1b       	sub	r26, r26
    1102:	bb 1b       	sub	r27, r27
    1104:	51 e1       	ldi	r21, 0x11	; 17
    1106:	07 c0       	rjmp	.+14     	; 0x1116 <__udivmodhi4_ep>

00001108 <__udivmodhi4_loop>:
    1108:	aa 1f       	adc	r26, r26
    110a:	bb 1f       	adc	r27, r27
    110c:	a6 17       	cp	r26, r22
    110e:	b7 07       	cpc	r27, r23
    1110:	10 f0       	brcs	.+4      	; 0x1116 <__udivmodhi4_ep>
    1112:	a6 1b       	sub	r26, r22
    1114:	b7 0b       	sbc	r27, r23

00001116 <__udivmodhi4_ep>:
    1116:	88 1f       	adc	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	5a 95       	dec	r21
    111c:	a9 f7       	brne	.-22     	; 0x1108 <__udivmodhi4_loop>
    111e:	80 95       	com	r24
    1120:	90 95       	com	r25
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	08 95       	ret

00001128 <atoi>:
    1128:	fc 01       	movw	r30, r24
    112a:	88 27       	eor	r24, r24
    112c:	99 27       	eor	r25, r25
    112e:	e8 94       	clt
    1130:	21 91       	ld	r18, Z+
    1132:	20 32       	cpi	r18, 0x20	; 32
    1134:	e9 f3       	breq	.-6      	; 0x1130 <atoi+0x8>
    1136:	29 30       	cpi	r18, 0x09	; 9
    1138:	10 f0       	brcs	.+4      	; 0x113e <atoi+0x16>
    113a:	2e 30       	cpi	r18, 0x0E	; 14
    113c:	c8 f3       	brcs	.-14     	; 0x1130 <atoi+0x8>
    113e:	2b 32       	cpi	r18, 0x2B	; 43
    1140:	41 f0       	breq	.+16     	; 0x1152 <atoi+0x2a>
    1142:	2d 32       	cpi	r18, 0x2D	; 45
    1144:	39 f4       	brne	.+14     	; 0x1154 <atoi+0x2c>
    1146:	68 94       	set
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <atoi+0x2a>
    114a:	0e 94 ef 08 	call	0x11de	; 0x11de <__mulhi_const_10>
    114e:	82 0f       	add	r24, r18
    1150:	91 1d       	adc	r25, r1
    1152:	21 91       	ld	r18, Z+
    1154:	20 53       	subi	r18, 0x30	; 48
    1156:	2a 30       	cpi	r18, 0x0A	; 10
    1158:	c0 f3       	brcs	.-16     	; 0x114a <atoi+0x22>
    115a:	1e f4       	brtc	.+6      	; 0x1162 <atoi+0x3a>
    115c:	90 95       	com	r25
    115e:	81 95       	neg	r24
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	08 95       	ret

00001164 <strcasecmp>:
    1164:	fb 01       	movw	r30, r22
    1166:	dc 01       	movw	r26, r24
    1168:	8d 91       	ld	r24, X+
    116a:	81 34       	cpi	r24, 0x41	; 65
    116c:	1c f0       	brlt	.+6      	; 0x1174 <strcasecmp+0x10>
    116e:	8b 35       	cpi	r24, 0x5B	; 91
    1170:	0c f4       	brge	.+2      	; 0x1174 <strcasecmp+0x10>
    1172:	80 5e       	subi	r24, 0xE0	; 224
    1174:	61 91       	ld	r22, Z+
    1176:	61 34       	cpi	r22, 0x41	; 65
    1178:	1c f0       	brlt	.+6      	; 0x1180 <strcasecmp+0x1c>
    117a:	6b 35       	cpi	r22, 0x5B	; 91
    117c:	0c f4       	brge	.+2      	; 0x1180 <strcasecmp+0x1c>
    117e:	60 5e       	subi	r22, 0xE0	; 224
    1180:	86 1b       	sub	r24, r22
    1182:	61 11       	cpse	r22, r1
    1184:	89 f3       	breq	.-30     	; 0x1168 <strcasecmp+0x4>
    1186:	99 0b       	sbc	r25, r25
    1188:	08 95       	ret

0000118a <strchr>:
    118a:	fc 01       	movw	r30, r24
    118c:	81 91       	ld	r24, Z+
    118e:	86 17       	cp	r24, r22
    1190:	21 f0       	breq	.+8      	; 0x119a <strchr+0x10>
    1192:	88 23       	and	r24, r24
    1194:	d9 f7       	brne	.-10     	; 0x118c <strchr+0x2>
    1196:	99 27       	eor	r25, r25
    1198:	08 95       	ret
    119a:	31 97       	sbiw	r30, 0x01	; 1
    119c:	cf 01       	movw	r24, r30
    119e:	08 95       	ret

000011a0 <strcpy>:
    11a0:	fb 01       	movw	r30, r22
    11a2:	dc 01       	movw	r26, r24
    11a4:	01 90       	ld	r0, Z+
    11a6:	0d 92       	st	X+, r0
    11a8:	00 20       	and	r0, r0
    11aa:	e1 f7       	brne	.-8      	; 0x11a4 <strcpy+0x4>
    11ac:	08 95       	ret

000011ae <strncasecmp>:
    11ae:	fb 01       	movw	r30, r22
    11b0:	dc 01       	movw	r26, r24
    11b2:	41 50       	subi	r20, 0x01	; 1
    11b4:	50 40       	sbci	r21, 0x00	; 0
    11b6:	88 f0       	brcs	.+34     	; 0x11da <strncasecmp+0x2c>
    11b8:	8d 91       	ld	r24, X+
    11ba:	81 34       	cpi	r24, 0x41	; 65
    11bc:	1c f0       	brlt	.+6      	; 0x11c4 <strncasecmp+0x16>
    11be:	8b 35       	cpi	r24, 0x5B	; 91
    11c0:	0c f4       	brge	.+2      	; 0x11c4 <strncasecmp+0x16>
    11c2:	80 5e       	subi	r24, 0xE0	; 224
    11c4:	61 91       	ld	r22, Z+
    11c6:	61 34       	cpi	r22, 0x41	; 65
    11c8:	1c f0       	brlt	.+6      	; 0x11d0 <strncasecmp+0x22>
    11ca:	6b 35       	cpi	r22, 0x5B	; 91
    11cc:	0c f4       	brge	.+2      	; 0x11d0 <strncasecmp+0x22>
    11ce:	60 5e       	subi	r22, 0xE0	; 224
    11d0:	86 1b       	sub	r24, r22
    11d2:	61 11       	cpse	r22, r1
    11d4:	71 f3       	breq	.-36     	; 0x11b2 <strncasecmp+0x4>
    11d6:	99 0b       	sbc	r25, r25
    11d8:	08 95       	ret
    11da:	88 1b       	sub	r24, r24
    11dc:	fc cf       	rjmp	.-8      	; 0x11d6 <strncasecmp+0x28>

000011de <__mulhi_const_10>:
    11de:	7a e0       	ldi	r23, 0x0A	; 10
    11e0:	97 9f       	mul	r25, r23
    11e2:	90 2d       	mov	r25, r0
    11e4:	87 9f       	mul	r24, r23
    11e6:	80 2d       	mov	r24, r0
    11e8:	91 0d       	add	r25, r1
    11ea:	11 24       	eor	r1, r1
    11ec:	08 95       	ret

000011ee <sprintf>:
    11ee:	ae e0       	ldi	r26, 0x0E	; 14
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ed ef       	ldi	r30, 0xFD	; 253
    11f4:	f8 e0       	ldi	r31, 0x08	; 8
    11f6:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__prologue_saves__+0x1c>
    11fa:	0d 89       	ldd	r16, Y+21	; 0x15
    11fc:	1e 89       	ldd	r17, Y+22	; 0x16
    11fe:	86 e0       	ldi	r24, 0x06	; 6
    1200:	8c 83       	std	Y+4, r24	; 0x04
    1202:	1a 83       	std	Y+2, r17	; 0x02
    1204:	09 83       	std	Y+1, r16	; 0x01
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	9f e7       	ldi	r25, 0x7F	; 127
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	ae 01       	movw	r20, r28
    1210:	47 5e       	subi	r20, 0xE7	; 231
    1212:	5f 4f       	sbci	r21, 0xFF	; 255
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	6f 89       	ldd	r22, Y+23	; 0x17
    121a:	78 8d       	ldd	r23, Y+24	; 0x18
    121c:	0e 94 19 09 	call	0x1232	; 0x1232 <vfprintf>
    1220:	ef 81       	ldd	r30, Y+7	; 0x07
    1222:	f8 85       	ldd	r31, Y+8	; 0x08
    1224:	e0 0f       	add	r30, r16
    1226:	f1 1f       	adc	r31, r17
    1228:	10 82       	st	Z, r1
    122a:	2e 96       	adiw	r28, 0x0e	; 14
    122c:	e4 e0       	ldi	r30, 0x04	; 4
    122e:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__epilogue_restores__+0x1c>

00001232 <vfprintf>:
    1232:	ad e0       	ldi	r26, 0x0D	; 13
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ef e1       	ldi	r30, 0x1F	; 31
    1238:	f9 e0       	ldi	r31, 0x09	; 9
    123a:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__prologue_saves__>
    123e:	3c 01       	movw	r6, r24
    1240:	7d 87       	std	Y+13, r23	; 0x0d
    1242:	6c 87       	std	Y+12, r22	; 0x0c
    1244:	5a 01       	movw	r10, r20
    1246:	fc 01       	movw	r30, r24
    1248:	17 82       	std	Z+7, r1	; 0x07
    124a:	16 82       	std	Z+6, r1	; 0x06
    124c:	83 81       	ldd	r24, Z+3	; 0x03
    124e:	81 ff       	sbrs	r24, 1
    1250:	c8 c1       	rjmp	.+912    	; 0x15e2 <vfprintf+0x3b0>
    1252:	2e 01       	movw	r4, r28
    1254:	08 94       	sec
    1256:	41 1c       	adc	r4, r1
    1258:	51 1c       	adc	r5, r1
    125a:	f3 01       	movw	r30, r6
    125c:	93 81       	ldd	r25, Z+3	; 0x03
    125e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1260:	fd 85       	ldd	r31, Y+13	; 0x0d
    1262:	93 fd       	sbrc	r25, 3
    1264:	85 91       	lpm	r24, Z+
    1266:	93 ff       	sbrs	r25, 3
    1268:	81 91       	ld	r24, Z+
    126a:	fd 87       	std	Y+13, r31	; 0x0d
    126c:	ec 87       	std	Y+12, r30	; 0x0c
    126e:	88 23       	and	r24, r24
    1270:	09 f4       	brne	.+2      	; 0x1274 <vfprintf+0x42>
    1272:	b3 c1       	rjmp	.+870    	; 0x15da <vfprintf+0x3a8>
    1274:	85 32       	cpi	r24, 0x25	; 37
    1276:	41 f4       	brne	.+16     	; 0x1288 <vfprintf+0x56>
    1278:	93 fd       	sbrc	r25, 3
    127a:	85 91       	lpm	r24, Z+
    127c:	93 ff       	sbrs	r25, 3
    127e:	81 91       	ld	r24, Z+
    1280:	fd 87       	std	Y+13, r31	; 0x0d
    1282:	ec 87       	std	Y+12, r30	; 0x0c
    1284:	85 32       	cpi	r24, 0x25	; 37
    1286:	29 f4       	brne	.+10     	; 0x1292 <vfprintf+0x60>
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	b3 01       	movw	r22, r6
    128c:	0e 94 0d 0b 	call	0x161a	; 0x161a <fputc>
    1290:	e4 cf       	rjmp	.-56     	; 0x125a <vfprintf+0x28>
    1292:	ff 24       	eor	r15, r15
    1294:	ee 24       	eor	r14, r14
    1296:	10 e0       	ldi	r17, 0x00	; 0
    1298:	10 32       	cpi	r17, 0x20	; 32
    129a:	b0 f4       	brcc	.+44     	; 0x12c8 <vfprintf+0x96>
    129c:	8b 32       	cpi	r24, 0x2B	; 43
    129e:	69 f0       	breq	.+26     	; 0x12ba <vfprintf+0x88>
    12a0:	8c 32       	cpi	r24, 0x2C	; 44
    12a2:	28 f4       	brcc	.+10     	; 0x12ae <vfprintf+0x7c>
    12a4:	80 32       	cpi	r24, 0x20	; 32
    12a6:	51 f0       	breq	.+20     	; 0x12bc <vfprintf+0x8a>
    12a8:	83 32       	cpi	r24, 0x23	; 35
    12aa:	71 f4       	brne	.+28     	; 0x12c8 <vfprintf+0x96>
    12ac:	0b c0       	rjmp	.+22     	; 0x12c4 <vfprintf+0x92>
    12ae:	8d 32       	cpi	r24, 0x2D	; 45
    12b0:	39 f0       	breq	.+14     	; 0x12c0 <vfprintf+0x8e>
    12b2:	80 33       	cpi	r24, 0x30	; 48
    12b4:	49 f4       	brne	.+18     	; 0x12c8 <vfprintf+0x96>
    12b6:	11 60       	ori	r17, 0x01	; 1
    12b8:	2c c0       	rjmp	.+88     	; 0x1312 <vfprintf+0xe0>
    12ba:	12 60       	ori	r17, 0x02	; 2
    12bc:	14 60       	ori	r17, 0x04	; 4
    12be:	29 c0       	rjmp	.+82     	; 0x1312 <vfprintf+0xe0>
    12c0:	18 60       	ori	r17, 0x08	; 8
    12c2:	27 c0       	rjmp	.+78     	; 0x1312 <vfprintf+0xe0>
    12c4:	10 61       	ori	r17, 0x10	; 16
    12c6:	25 c0       	rjmp	.+74     	; 0x1312 <vfprintf+0xe0>
    12c8:	17 fd       	sbrc	r17, 7
    12ca:	2e c0       	rjmp	.+92     	; 0x1328 <vfprintf+0xf6>
    12cc:	28 2f       	mov	r18, r24
    12ce:	20 53       	subi	r18, 0x30	; 48
    12d0:	2a 30       	cpi	r18, 0x0A	; 10
    12d2:	98 f4       	brcc	.+38     	; 0x12fa <vfprintf+0xc8>
    12d4:	16 ff       	sbrs	r17, 6
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <vfprintf+0xb6>
    12d8:	8f 2d       	mov	r24, r15
    12da:	88 0f       	add	r24, r24
    12dc:	f8 2e       	mov	r15, r24
    12de:	ff 0c       	add	r15, r15
    12e0:	ff 0c       	add	r15, r15
    12e2:	f8 0e       	add	r15, r24
    12e4:	f2 0e       	add	r15, r18
    12e6:	15 c0       	rjmp	.+42     	; 0x1312 <vfprintf+0xe0>
    12e8:	8e 2d       	mov	r24, r14
    12ea:	88 0f       	add	r24, r24
    12ec:	e8 2e       	mov	r14, r24
    12ee:	ee 0c       	add	r14, r14
    12f0:	ee 0c       	add	r14, r14
    12f2:	e8 0e       	add	r14, r24
    12f4:	e2 0e       	add	r14, r18
    12f6:	10 62       	ori	r17, 0x20	; 32
    12f8:	0c c0       	rjmp	.+24     	; 0x1312 <vfprintf+0xe0>
    12fa:	8e 32       	cpi	r24, 0x2E	; 46
    12fc:	21 f4       	brne	.+8      	; 0x1306 <vfprintf+0xd4>
    12fe:	16 fd       	sbrc	r17, 6
    1300:	6c c1       	rjmp	.+728    	; 0x15da <vfprintf+0x3a8>
    1302:	10 64       	ori	r17, 0x40	; 64
    1304:	06 c0       	rjmp	.+12     	; 0x1312 <vfprintf+0xe0>
    1306:	8c 36       	cpi	r24, 0x6C	; 108
    1308:	11 f4       	brne	.+4      	; 0x130e <vfprintf+0xdc>
    130a:	10 68       	ori	r17, 0x80	; 128
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <vfprintf+0xe0>
    130e:	88 36       	cpi	r24, 0x68	; 104
    1310:	59 f4       	brne	.+22     	; 0x1328 <vfprintf+0xf6>
    1312:	ec 85       	ldd	r30, Y+12	; 0x0c
    1314:	fd 85       	ldd	r31, Y+13	; 0x0d
    1316:	93 fd       	sbrc	r25, 3
    1318:	85 91       	lpm	r24, Z+
    131a:	93 ff       	sbrs	r25, 3
    131c:	81 91       	ld	r24, Z+
    131e:	fd 87       	std	Y+13, r31	; 0x0d
    1320:	ec 87       	std	Y+12, r30	; 0x0c
    1322:	88 23       	and	r24, r24
    1324:	09 f0       	breq	.+2      	; 0x1328 <vfprintf+0xf6>
    1326:	b8 cf       	rjmp	.-144    	; 0x1298 <vfprintf+0x66>
    1328:	98 2f       	mov	r25, r24
    132a:	95 54       	subi	r25, 0x45	; 69
    132c:	93 30       	cpi	r25, 0x03	; 3
    132e:	18 f0       	brcs	.+6      	; 0x1336 <vfprintf+0x104>
    1330:	90 52       	subi	r25, 0x20	; 32
    1332:	93 30       	cpi	r25, 0x03	; 3
    1334:	38 f4       	brcc	.+14     	; 0x1344 <vfprintf+0x112>
    1336:	24 e0       	ldi	r18, 0x04	; 4
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	a2 0e       	add	r10, r18
    133c:	b3 1e       	adc	r11, r19
    133e:	3f e3       	ldi	r19, 0x3F	; 63
    1340:	39 83       	std	Y+1, r19	; 0x01
    1342:	0f c0       	rjmp	.+30     	; 0x1362 <vfprintf+0x130>
    1344:	83 36       	cpi	r24, 0x63	; 99
    1346:	31 f0       	breq	.+12     	; 0x1354 <vfprintf+0x122>
    1348:	83 37       	cpi	r24, 0x73	; 115
    134a:	81 f0       	breq	.+32     	; 0x136c <vfprintf+0x13a>
    134c:	83 35       	cpi	r24, 0x53	; 83
    134e:	09 f0       	breq	.+2      	; 0x1352 <vfprintf+0x120>
    1350:	5a c0       	rjmp	.+180    	; 0x1406 <vfprintf+0x1d4>
    1352:	22 c0       	rjmp	.+68     	; 0x1398 <vfprintf+0x166>
    1354:	f5 01       	movw	r30, r10
    1356:	80 81       	ld	r24, Z
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	22 e0       	ldi	r18, 0x02	; 2
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	a2 0e       	add	r10, r18
    1360:	b3 1e       	adc	r11, r19
    1362:	21 e0       	ldi	r18, 0x01	; 1
    1364:	c2 2e       	mov	r12, r18
    1366:	d1 2c       	mov	r13, r1
    1368:	42 01       	movw	r8, r4
    136a:	14 c0       	rjmp	.+40     	; 0x1394 <vfprintf+0x162>
    136c:	92 e0       	ldi	r25, 0x02	; 2
    136e:	29 2e       	mov	r2, r25
    1370:	31 2c       	mov	r3, r1
    1372:	2a 0c       	add	r2, r10
    1374:	3b 1c       	adc	r3, r11
    1376:	f5 01       	movw	r30, r10
    1378:	80 80       	ld	r8, Z
    137a:	91 80       	ldd	r9, Z+1	; 0x01
    137c:	16 ff       	sbrs	r17, 6
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <vfprintf+0x154>
    1380:	6f 2d       	mov	r22, r15
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	02 c0       	rjmp	.+4      	; 0x138a <vfprintf+0x158>
    1386:	6f ef       	ldi	r22, 0xFF	; 255
    1388:	7f ef       	ldi	r23, 0xFF	; 255
    138a:	c4 01       	movw	r24, r8
    138c:	0e 94 02 0b 	call	0x1604	; 0x1604 <strnlen>
    1390:	6c 01       	movw	r12, r24
    1392:	51 01       	movw	r10, r2
    1394:	1f 77       	andi	r17, 0x7F	; 127
    1396:	15 c0       	rjmp	.+42     	; 0x13c2 <vfprintf+0x190>
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	28 2e       	mov	r2, r24
    139c:	31 2c       	mov	r3, r1
    139e:	2a 0c       	add	r2, r10
    13a0:	3b 1c       	adc	r3, r11
    13a2:	f5 01       	movw	r30, r10
    13a4:	80 80       	ld	r8, Z
    13a6:	91 80       	ldd	r9, Z+1	; 0x01
    13a8:	16 ff       	sbrs	r17, 6
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <vfprintf+0x180>
    13ac:	6f 2d       	mov	r22, r15
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0x184>
    13b2:	6f ef       	ldi	r22, 0xFF	; 255
    13b4:	7f ef       	ldi	r23, 0xFF	; 255
    13b6:	c4 01       	movw	r24, r8
    13b8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <strnlen_P>
    13bc:	6c 01       	movw	r12, r24
    13be:	10 68       	ori	r17, 0x80	; 128
    13c0:	51 01       	movw	r10, r2
    13c2:	13 fd       	sbrc	r17, 3
    13c4:	1c c0       	rjmp	.+56     	; 0x13fe <vfprintf+0x1cc>
    13c6:	06 c0       	rjmp	.+12     	; 0x13d4 <vfprintf+0x1a2>
    13c8:	80 e2       	ldi	r24, 0x20	; 32
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	b3 01       	movw	r22, r6
    13ce:	0e 94 0d 0b 	call	0x161a	; 0x161a <fputc>
    13d2:	ea 94       	dec	r14
    13d4:	8e 2d       	mov	r24, r14
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	c8 16       	cp	r12, r24
    13da:	d9 06       	cpc	r13, r25
    13dc:	a8 f3       	brcs	.-22     	; 0x13c8 <vfprintf+0x196>
    13de:	0f c0       	rjmp	.+30     	; 0x13fe <vfprintf+0x1cc>
    13e0:	f4 01       	movw	r30, r8
    13e2:	17 fd       	sbrc	r17, 7
    13e4:	85 91       	lpm	r24, Z+
    13e6:	17 ff       	sbrs	r17, 7
    13e8:	81 91       	ld	r24, Z+
    13ea:	4f 01       	movw	r8, r30
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	b3 01       	movw	r22, r6
    13f0:	0e 94 0d 0b 	call	0x161a	; 0x161a <fputc>
    13f4:	e1 10       	cpse	r14, r1
    13f6:	ea 94       	dec	r14
    13f8:	08 94       	sec
    13fa:	c1 08       	sbc	r12, r1
    13fc:	d1 08       	sbc	r13, r1
    13fe:	c1 14       	cp	r12, r1
    1400:	d1 04       	cpc	r13, r1
    1402:	71 f7       	brne	.-36     	; 0x13e0 <vfprintf+0x1ae>
    1404:	e7 c0       	rjmp	.+462    	; 0x15d4 <vfprintf+0x3a2>
    1406:	84 36       	cpi	r24, 0x64	; 100
    1408:	11 f0       	breq	.+4      	; 0x140e <vfprintf+0x1dc>
    140a:	89 36       	cpi	r24, 0x69	; 105
    140c:	51 f5       	brne	.+84     	; 0x1462 <vfprintf+0x230>
    140e:	f5 01       	movw	r30, r10
    1410:	17 ff       	sbrs	r17, 7
    1412:	07 c0       	rjmp	.+14     	; 0x1422 <vfprintf+0x1f0>
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	a2 81       	ldd	r26, Z+2	; 0x02
    141a:	b3 81       	ldd	r27, Z+3	; 0x03
    141c:	24 e0       	ldi	r18, 0x04	; 4
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	08 c0       	rjmp	.+16     	; 0x1432 <vfprintf+0x200>
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	aa 27       	eor	r26, r26
    1428:	97 fd       	sbrc	r25, 7
    142a:	a0 95       	com	r26
    142c:	ba 2f       	mov	r27, r26
    142e:	22 e0       	ldi	r18, 0x02	; 2
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	a2 0e       	add	r10, r18
    1434:	b3 1e       	adc	r11, r19
    1436:	01 2f       	mov	r16, r17
    1438:	0f 76       	andi	r16, 0x6F	; 111
    143a:	b7 ff       	sbrs	r27, 7
    143c:	08 c0       	rjmp	.+16     	; 0x144e <vfprintf+0x21c>
    143e:	b0 95       	com	r27
    1440:	a0 95       	com	r26
    1442:	90 95       	com	r25
    1444:	81 95       	neg	r24
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	af 4f       	sbci	r26, 0xFF	; 255
    144a:	bf 4f       	sbci	r27, 0xFF	; 255
    144c:	00 68       	ori	r16, 0x80	; 128
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	a2 01       	movw	r20, r4
    1454:	2a e0       	ldi	r18, 0x0A	; 10
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	0e 94 39 0b 	call	0x1672	; 0x1672 <__ultoa_invert>
    145c:	d8 2e       	mov	r13, r24
    145e:	d4 18       	sub	r13, r4
    1460:	3f c0       	rjmp	.+126    	; 0x14e0 <vfprintf+0x2ae>
    1462:	85 37       	cpi	r24, 0x75	; 117
    1464:	21 f4       	brne	.+8      	; 0x146e <vfprintf+0x23c>
    1466:	1f 7e       	andi	r17, 0xEF	; 239
    1468:	2a e0       	ldi	r18, 0x0A	; 10
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	20 c0       	rjmp	.+64     	; 0x14ae <vfprintf+0x27c>
    146e:	19 7f       	andi	r17, 0xF9	; 249
    1470:	8f 36       	cpi	r24, 0x6F	; 111
    1472:	a9 f0       	breq	.+42     	; 0x149e <vfprintf+0x26c>
    1474:	80 37       	cpi	r24, 0x70	; 112
    1476:	20 f4       	brcc	.+8      	; 0x1480 <vfprintf+0x24e>
    1478:	88 35       	cpi	r24, 0x58	; 88
    147a:	09 f0       	breq	.+2      	; 0x147e <vfprintf+0x24c>
    147c:	ae c0       	rjmp	.+348    	; 0x15da <vfprintf+0x3a8>
    147e:	0b c0       	rjmp	.+22     	; 0x1496 <vfprintf+0x264>
    1480:	80 37       	cpi	r24, 0x70	; 112
    1482:	21 f0       	breq	.+8      	; 0x148c <vfprintf+0x25a>
    1484:	88 37       	cpi	r24, 0x78	; 120
    1486:	09 f0       	breq	.+2      	; 0x148a <vfprintf+0x258>
    1488:	a8 c0       	rjmp	.+336    	; 0x15da <vfprintf+0x3a8>
    148a:	01 c0       	rjmp	.+2      	; 0x148e <vfprintf+0x25c>
    148c:	10 61       	ori	r17, 0x10	; 16
    148e:	14 ff       	sbrs	r17, 4
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <vfprintf+0x272>
    1492:	14 60       	ori	r17, 0x04	; 4
    1494:	07 c0       	rjmp	.+14     	; 0x14a4 <vfprintf+0x272>
    1496:	14 ff       	sbrs	r17, 4
    1498:	08 c0       	rjmp	.+16     	; 0x14aa <vfprintf+0x278>
    149a:	16 60       	ori	r17, 0x06	; 6
    149c:	06 c0       	rjmp	.+12     	; 0x14aa <vfprintf+0x278>
    149e:	28 e0       	ldi	r18, 0x08	; 8
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <vfprintf+0x27c>
    14a4:	20 e1       	ldi	r18, 0x10	; 16
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x27c>
    14aa:	20 e1       	ldi	r18, 0x10	; 16
    14ac:	32 e0       	ldi	r19, 0x02	; 2
    14ae:	f5 01       	movw	r30, r10
    14b0:	17 ff       	sbrs	r17, 7
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <vfprintf+0x290>
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	44 e0       	ldi	r20, 0x04	; 4
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <vfprintf+0x29c>
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	42 e0       	ldi	r20, 0x02	; 2
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	a4 0e       	add	r10, r20
    14d0:	b5 1e       	adc	r11, r21
    14d2:	a2 01       	movw	r20, r4
    14d4:	0e 94 39 0b 	call	0x1672	; 0x1672 <__ultoa_invert>
    14d8:	d8 2e       	mov	r13, r24
    14da:	d4 18       	sub	r13, r4
    14dc:	01 2f       	mov	r16, r17
    14de:	0f 77       	andi	r16, 0x7F	; 127
    14e0:	06 ff       	sbrs	r16, 6
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <vfprintf+0x2c4>
    14e4:	0e 7f       	andi	r16, 0xFE	; 254
    14e6:	df 14       	cp	r13, r15
    14e8:	30 f4       	brcc	.+12     	; 0x14f6 <vfprintf+0x2c4>
    14ea:	04 ff       	sbrs	r16, 4
    14ec:	06 c0       	rjmp	.+12     	; 0x14fa <vfprintf+0x2c8>
    14ee:	02 fd       	sbrc	r16, 2
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <vfprintf+0x2c8>
    14f2:	0f 7e       	andi	r16, 0xEF	; 239
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <vfprintf+0x2c8>
    14f6:	1d 2d       	mov	r17, r13
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <vfprintf+0x2ca>
    14fa:	1f 2d       	mov	r17, r15
    14fc:	80 2f       	mov	r24, r16
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	04 ff       	sbrs	r16, 4
    1502:	0c c0       	rjmp	.+24     	; 0x151c <vfprintf+0x2ea>
    1504:	fe 01       	movw	r30, r28
    1506:	ed 0d       	add	r30, r13
    1508:	f1 1d       	adc	r31, r1
    150a:	20 81       	ld	r18, Z
    150c:	20 33       	cpi	r18, 0x30	; 48
    150e:	11 f4       	brne	.+4      	; 0x1514 <vfprintf+0x2e2>
    1510:	09 7e       	andi	r16, 0xE9	; 233
    1512:	09 c0       	rjmp	.+18     	; 0x1526 <vfprintf+0x2f4>
    1514:	02 ff       	sbrs	r16, 2
    1516:	06 c0       	rjmp	.+12     	; 0x1524 <vfprintf+0x2f2>
    1518:	1e 5f       	subi	r17, 0xFE	; 254
    151a:	05 c0       	rjmp	.+10     	; 0x1526 <vfprintf+0x2f4>
    151c:	86 78       	andi	r24, 0x86	; 134
    151e:	90 70       	andi	r25, 0x00	; 0
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	09 f0       	breq	.+2      	; 0x1526 <vfprintf+0x2f4>
    1524:	1f 5f       	subi	r17, 0xFF	; 255
    1526:	80 2e       	mov	r8, r16
    1528:	99 24       	eor	r9, r9
    152a:	03 fd       	sbrc	r16, 3
    152c:	12 c0       	rjmp	.+36     	; 0x1552 <vfprintf+0x320>
    152e:	00 ff       	sbrs	r16, 0
    1530:	0d c0       	rjmp	.+26     	; 0x154c <vfprintf+0x31a>
    1532:	fd 2c       	mov	r15, r13
    1534:	1e 15       	cp	r17, r14
    1536:	50 f4       	brcc	.+20     	; 0x154c <vfprintf+0x31a>
    1538:	fe 0c       	add	r15, r14
    153a:	f1 1a       	sub	r15, r17
    153c:	1e 2d       	mov	r17, r14
    153e:	06 c0       	rjmp	.+12     	; 0x154c <vfprintf+0x31a>
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	b3 01       	movw	r22, r6
    1546:	0e 94 0d 0b 	call	0x161a	; 0x161a <fputc>
    154a:	1f 5f       	subi	r17, 0xFF	; 255
    154c:	1e 15       	cp	r17, r14
    154e:	c0 f3       	brcs	.-16     	; 0x1540 <vfprintf+0x30e>
    1550:	04 c0       	rjmp	.+8      	; 0x155a <vfprintf+0x328>
    1552:	1e 15       	cp	r17, r14
    1554:	10 f4       	brcc	.+4      	; 0x155a <vfprintf+0x328>
    1556:	e1 1a       	sub	r14, r17
    1558:	01 c0       	rjmp	.+2      	; 0x155c <vfprintf+0x32a>
    155a:	ee 24       	eor	r14, r14
    155c:	84 fe       	sbrs	r8, 4
    155e:	0f c0       	rjmp	.+30     	; 0x157e <vfprintf+0x34c>
    1560:	80 e3       	ldi	r24, 0x30	; 48
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	b3 01       	movw	r22, r6
    1566:	0e 94 0d 0b 	call	0x161a	; 0x161a <fputc>
    156a:	82 fe       	sbrs	r8, 2
    156c:	1f c0       	rjmp	.+62     	; 0x15ac <vfprintf+0x37a>
    156e:	81 fe       	sbrs	r8, 1
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <vfprintf+0x346>
    1572:	88 e5       	ldi	r24, 0x58	; 88
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	10 c0       	rjmp	.+32     	; 0x1598 <vfprintf+0x366>
    1578:	88 e7       	ldi	r24, 0x78	; 120
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0d c0       	rjmp	.+26     	; 0x1598 <vfprintf+0x366>
    157e:	c4 01       	movw	r24, r8
    1580:	86 78       	andi	r24, 0x86	; 134
    1582:	90 70       	andi	r25, 0x00	; 0
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	91 f0       	breq	.+36     	; 0x15ac <vfprintf+0x37a>
    1588:	81 fc       	sbrc	r8, 1
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <vfprintf+0x35e>
    158c:	80 e2       	ldi	r24, 0x20	; 32
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <vfprintf+0x360>
    1590:	8b e2       	ldi	r24, 0x2B	; 43
    1592:	07 fd       	sbrc	r16, 7
    1594:	8d e2       	ldi	r24, 0x2D	; 45
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	b3 01       	movw	r22, r6
    159a:	0e 94 0d 0b 	call	0x161a	; 0x161a <fputc>
    159e:	06 c0       	rjmp	.+12     	; 0x15ac <vfprintf+0x37a>
    15a0:	80 e3       	ldi	r24, 0x30	; 48
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	b3 01       	movw	r22, r6
    15a6:	0e 94 0d 0b 	call	0x161a	; 0x161a <fputc>
    15aa:	fa 94       	dec	r15
    15ac:	df 14       	cp	r13, r15
    15ae:	c0 f3       	brcs	.-16     	; 0x15a0 <vfprintf+0x36e>
    15b0:	da 94       	dec	r13
    15b2:	f2 01       	movw	r30, r4
    15b4:	ed 0d       	add	r30, r13
    15b6:	f1 1d       	adc	r31, r1
    15b8:	80 81       	ld	r24, Z
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	b3 01       	movw	r22, r6
    15be:	0e 94 0d 0b 	call	0x161a	; 0x161a <fputc>
    15c2:	dd 20       	and	r13, r13
    15c4:	a9 f7       	brne	.-22     	; 0x15b0 <vfprintf+0x37e>
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <vfprintf+0x3a2>
    15c8:	80 e2       	ldi	r24, 0x20	; 32
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	b3 01       	movw	r22, r6
    15ce:	0e 94 0d 0b 	call	0x161a	; 0x161a <fputc>
    15d2:	ea 94       	dec	r14
    15d4:	ee 20       	and	r14, r14
    15d6:	c1 f7       	brne	.-16     	; 0x15c8 <vfprintf+0x396>
    15d8:	40 ce       	rjmp	.-896    	; 0x125a <vfprintf+0x28>
    15da:	f3 01       	movw	r30, r6
    15dc:	86 81       	ldd	r24, Z+6	; 0x06
    15de:	97 81       	ldd	r25, Z+7	; 0x07
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <vfprintf+0x3b4>
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	9f ef       	ldi	r25, 0xFF	; 255
    15e6:	2d 96       	adiw	r28, 0x0d	; 13
    15e8:	e2 e1       	ldi	r30, 0x12	; 18
    15ea:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__epilogue_restores__>

000015ee <strnlen_P>:
    15ee:	fc 01       	movw	r30, r24
    15f0:	05 90       	lpm	r0, Z+
    15f2:	61 50       	subi	r22, 0x01	; 1
    15f4:	70 40       	sbci	r23, 0x00	; 0
    15f6:	01 10       	cpse	r0, r1
    15f8:	d8 f7       	brcc	.-10     	; 0x15f0 <strnlen_P+0x2>
    15fa:	80 95       	com	r24
    15fc:	90 95       	com	r25
    15fe:	8e 0f       	add	r24, r30
    1600:	9f 1f       	adc	r25, r31
    1602:	08 95       	ret

00001604 <strnlen>:
    1604:	fc 01       	movw	r30, r24
    1606:	61 50       	subi	r22, 0x01	; 1
    1608:	70 40       	sbci	r23, 0x00	; 0
    160a:	01 90       	ld	r0, Z+
    160c:	01 10       	cpse	r0, r1
    160e:	d8 f7       	brcc	.-10     	; 0x1606 <strnlen+0x2>
    1610:	80 95       	com	r24
    1612:	90 95       	com	r25
    1614:	8e 0f       	add	r24, r30
    1616:	9f 1f       	adc	r25, r31
    1618:	08 95       	ret

0000161a <fputc>:
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	8c 01       	movw	r16, r24
    1624:	eb 01       	movw	r28, r22
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	81 ff       	sbrs	r24, 1
    162a:	1b c0       	rjmp	.+54     	; 0x1662 <fputc+0x48>
    162c:	82 ff       	sbrs	r24, 2
    162e:	0d c0       	rjmp	.+26     	; 0x164a <fputc+0x30>
    1630:	2e 81       	ldd	r18, Y+6	; 0x06
    1632:	3f 81       	ldd	r19, Y+7	; 0x07
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	28 17       	cp	r18, r24
    163a:	39 07       	cpc	r19, r25
    163c:	64 f4       	brge	.+24     	; 0x1656 <fputc+0x3c>
    163e:	e8 81       	ld	r30, Y
    1640:	f9 81       	ldd	r31, Y+1	; 0x01
    1642:	01 93       	st	Z+, r16
    1644:	f9 83       	std	Y+1, r31	; 0x01
    1646:	e8 83       	st	Y, r30
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <fputc+0x3c>
    164a:	e8 85       	ldd	r30, Y+8	; 0x08
    164c:	f9 85       	ldd	r31, Y+9	; 0x09
    164e:	80 2f       	mov	r24, r16
    1650:	09 95       	icall
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	31 f4       	brne	.+12     	; 0x1662 <fputc+0x48>
    1656:	8e 81       	ldd	r24, Y+6	; 0x06
    1658:	9f 81       	ldd	r25, Y+7	; 0x07
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	9f 83       	std	Y+7, r25	; 0x07
    165e:	8e 83       	std	Y+6, r24	; 0x06
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <fputc+0x4c>
    1662:	0f ef       	ldi	r16, 0xFF	; 255
    1664:	1f ef       	ldi	r17, 0xFF	; 255
    1666:	c8 01       	movw	r24, r16
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	08 95       	ret

00001672 <__ultoa_invert>:
    1672:	fa 01       	movw	r30, r20
    1674:	aa 27       	eor	r26, r26
    1676:	28 30       	cpi	r18, 0x08	; 8
    1678:	51 f1       	breq	.+84     	; 0x16ce <__ultoa_invert+0x5c>
    167a:	20 31       	cpi	r18, 0x10	; 16
    167c:	81 f1       	breq	.+96     	; 0x16de <__ultoa_invert+0x6c>
    167e:	e8 94       	clt
    1680:	6f 93       	push	r22
    1682:	6e 7f       	andi	r22, 0xFE	; 254
    1684:	6e 5f       	subi	r22, 0xFE	; 254
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	8f 4f       	sbci	r24, 0xFF	; 255
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	af 4f       	sbci	r26, 0xFF	; 255
    168e:	b1 e0       	ldi	r27, 0x01	; 1
    1690:	3e d0       	rcall	.+124    	; 0x170e <__ultoa_invert+0x9c>
    1692:	b4 e0       	ldi	r27, 0x04	; 4
    1694:	3c d0       	rcall	.+120    	; 0x170e <__ultoa_invert+0x9c>
    1696:	67 0f       	add	r22, r23
    1698:	78 1f       	adc	r23, r24
    169a:	89 1f       	adc	r24, r25
    169c:	9a 1f       	adc	r25, r26
    169e:	a1 1d       	adc	r26, r1
    16a0:	68 0f       	add	r22, r24
    16a2:	79 1f       	adc	r23, r25
    16a4:	8a 1f       	adc	r24, r26
    16a6:	91 1d       	adc	r25, r1
    16a8:	a1 1d       	adc	r26, r1
    16aa:	6a 0f       	add	r22, r26
    16ac:	71 1d       	adc	r23, r1
    16ae:	81 1d       	adc	r24, r1
    16b0:	91 1d       	adc	r25, r1
    16b2:	a1 1d       	adc	r26, r1
    16b4:	20 d0       	rcall	.+64     	; 0x16f6 <__ultoa_invert+0x84>
    16b6:	09 f4       	brne	.+2      	; 0x16ba <__ultoa_invert+0x48>
    16b8:	68 94       	set
    16ba:	3f 91       	pop	r19
    16bc:	2a e0       	ldi	r18, 0x0A	; 10
    16be:	26 9f       	mul	r18, r22
    16c0:	11 24       	eor	r1, r1
    16c2:	30 19       	sub	r19, r0
    16c4:	30 5d       	subi	r19, 0xD0	; 208
    16c6:	31 93       	st	Z+, r19
    16c8:	de f6       	brtc	.-74     	; 0x1680 <__ultoa_invert+0xe>
    16ca:	cf 01       	movw	r24, r30
    16cc:	08 95       	ret
    16ce:	46 2f       	mov	r20, r22
    16d0:	47 70       	andi	r20, 0x07	; 7
    16d2:	40 5d       	subi	r20, 0xD0	; 208
    16d4:	41 93       	st	Z+, r20
    16d6:	b3 e0       	ldi	r27, 0x03	; 3
    16d8:	0f d0       	rcall	.+30     	; 0x16f8 <__ultoa_invert+0x86>
    16da:	c9 f7       	brne	.-14     	; 0x16ce <__ultoa_invert+0x5c>
    16dc:	f6 cf       	rjmp	.-20     	; 0x16ca <__ultoa_invert+0x58>
    16de:	46 2f       	mov	r20, r22
    16e0:	4f 70       	andi	r20, 0x0F	; 15
    16e2:	40 5d       	subi	r20, 0xD0	; 208
    16e4:	4a 33       	cpi	r20, 0x3A	; 58
    16e6:	18 f0       	brcs	.+6      	; 0x16ee <__ultoa_invert+0x7c>
    16e8:	49 5d       	subi	r20, 0xD9	; 217
    16ea:	31 fd       	sbrc	r19, 1
    16ec:	40 52       	subi	r20, 0x20	; 32
    16ee:	41 93       	st	Z+, r20
    16f0:	02 d0       	rcall	.+4      	; 0x16f6 <__ultoa_invert+0x84>
    16f2:	a9 f7       	brne	.-22     	; 0x16de <__ultoa_invert+0x6c>
    16f4:	ea cf       	rjmp	.-44     	; 0x16ca <__ultoa_invert+0x58>
    16f6:	b4 e0       	ldi	r27, 0x04	; 4
    16f8:	a6 95       	lsr	r26
    16fa:	97 95       	ror	r25
    16fc:	87 95       	ror	r24
    16fe:	77 95       	ror	r23
    1700:	67 95       	ror	r22
    1702:	ba 95       	dec	r27
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__ultoa_invert+0x86>
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	61 05       	cpc	r22, r1
    170a:	71 05       	cpc	r23, r1
    170c:	08 95       	ret
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	0a 2e       	mov	r0, r26
    1714:	06 94       	lsr	r0
    1716:	57 95       	ror	r21
    1718:	47 95       	ror	r20
    171a:	37 95       	ror	r19
    171c:	27 95       	ror	r18
    171e:	ba 95       	dec	r27
    1720:	c9 f7       	brne	.-14     	; 0x1714 <__ultoa_invert+0xa2>
    1722:	62 0f       	add	r22, r18
    1724:	73 1f       	adc	r23, r19
    1726:	84 1f       	adc	r24, r20
    1728:	95 1f       	adc	r25, r21
    172a:	a0 1d       	adc	r26, r0
    172c:	08 95       	ret

0000172e <__prologue_saves__>:
    172e:	2f 92       	push	r2
    1730:	3f 92       	push	r3
    1732:	4f 92       	push	r4
    1734:	5f 92       	push	r5
    1736:	6f 92       	push	r6
    1738:	7f 92       	push	r7
    173a:	8f 92       	push	r8
    173c:	9f 92       	push	r9
    173e:	af 92       	push	r10
    1740:	bf 92       	push	r11
    1742:	cf 92       	push	r12
    1744:	df 92       	push	r13
    1746:	ef 92       	push	r14
    1748:	ff 92       	push	r15
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	ca 1b       	sub	r28, r26
    1758:	db 0b       	sbc	r29, r27
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	09 94       	ijmp

00001766 <__epilogue_restores__>:
    1766:	2a 88       	ldd	r2, Y+18	; 0x12
    1768:	39 88       	ldd	r3, Y+17	; 0x11
    176a:	48 88       	ldd	r4, Y+16	; 0x10
    176c:	5f 84       	ldd	r5, Y+15	; 0x0f
    176e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1770:	7d 84       	ldd	r7, Y+13	; 0x0d
    1772:	8c 84       	ldd	r8, Y+12	; 0x0c
    1774:	9b 84       	ldd	r9, Y+11	; 0x0b
    1776:	aa 84       	ldd	r10, Y+10	; 0x0a
    1778:	b9 84       	ldd	r11, Y+9	; 0x09
    177a:	c8 84       	ldd	r12, Y+8	; 0x08
    177c:	df 80       	ldd	r13, Y+7	; 0x07
    177e:	ee 80       	ldd	r14, Y+6	; 0x06
    1780:	fd 80       	ldd	r15, Y+5	; 0x05
    1782:	0c 81       	ldd	r16, Y+4	; 0x04
    1784:	1b 81       	ldd	r17, Y+3	; 0x03
    1786:	aa 81       	ldd	r26, Y+2	; 0x02
    1788:	b9 81       	ldd	r27, Y+1	; 0x01
    178a:	ce 0f       	add	r28, r30
    178c:	d1 1d       	adc	r29, r1
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	ed 01       	movw	r28, r26
    179a:	08 95       	ret

0000179c <_exit>:
    179c:	f8 94       	cli

0000179e <__stop_program>:
    179e:	ff cf       	rjmp	.-2      	; 0x179e <__stop_program>
